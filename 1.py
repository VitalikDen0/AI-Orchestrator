#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AI PowerShell Orchestrator with Google Search Integration
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç LM Studio, PowerShell –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–∏—Å–∫ Google

–û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ Stable Diffusion –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ChromaDB –¥–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–¢–†–ï–ë–£–ï–ú–´–ï –ë–ò–ë–õ–ò–û–¢–ï–ö–ò:
pip install pyautogui mss pillow requests diffusers transformers torch torchvision accelerate safetensors chromadb sentence-transformers
"""

import requests
import subprocess
import json
import time
import sys as _sys
import os
import base64
import io
import re
import threading
import tempfile
import shutil
import math
import pyautogui
import mss
import queue
import logging
import argparse
from typing import Dict, Any, List, Union, Optional, TYPE_CHECKING
import urllib.parse
from PIL import Image
from io import BytesIO
from collections import defaultdict
import asyncio
import telegram
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ü–æ–º–æ—â—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞–º: —è–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
from typing import Any as _Any
chromadb: _Any = None
Settings: _Any = None
SentenceTransformer: _Any = None
torch: _Any = None
_imageio: _Any = None
_pygame: _Any = None

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è ChromaDB –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
try:
    import chromadb
    from chromadb.config import Settings
    from sentence_transformers import SentenceTransformer
    import numpy as np
    import torch
    CHROMADB_AVAILABLE = True
except ImportError:
    CHROMADB_AVAILABLE = False
    print("‚ö†Ô∏è ChromaDB –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install chromadb sentence-transformers")

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    import torch as _torch
    TORCH_AVAILABLE = True
except Exception:
    TORCH_AVAILABLE = False

try:
    import diffusers as _diffusers
    DIFFUSERS_AVAILABLE = True
except Exception:
    DIFFUSERS_AVAILABLE = False

try:
    import imageio as _imageio
    IMAGEIO_AVAILABLE = True
except Exception:
    IMAGEIO_AVAILABLE = False

try:
    import pygame as _pygame
    PYGAME_AVAILABLE = True
except Exception:
    PYGAME_AVAILABLE = False

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
# override=True - –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
load_dotenv(override=True)

# Determine if running in web mode (show verbose console logs)
IS_WEB = any(arg == '--web' for arg in _sys.argv)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –≤—Å–µ–≥–¥–∞ –ø–∏—à–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–∞–π–ª, –Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º INFO —Ç–æ–ª—å–∫–æ –≤ --web
log_file = "ai_orchestrator.log"
root_logger = logging.getLogger()
root_logger.setLevel(logging.DEBUG)

# File handler: keep full INFO logs for later inspection
file_handler = logging.FileHandler(log_file, mode='w', encoding='utf-8')
file_handler.setLevel(logging.INFO)
file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(file_formatter)
root_logger.addHandler(file_handler)

# Console handler: verbose only for --web, otherwise warnings+ only
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(file_formatter)
root_logger.addHandler(console_handler)

logger = logging.getLogger(__name__)

# Disable chromadb telemetry / noisy chromadb logs entirely
try:
    chroma_logger = logging.getLogger('chromadb')
    chroma_logger.disabled = True
except Exception:
    pass

# Filter for telemetry messages: only applied to console handler so file logs keep full info
class TelemetryFilter(logging.Filter):
    def __init__(self, patterns=None):
        super().__init__()
        self.patterns = patterns or ["Failed to send telemetry event", "telemetry", "capture() takes"]

    def filter(self, record: logging.LogRecord) -> bool:
        try:
            msg = record.getMessage()
        except Exception:
            msg = ''
        for p in self.patterns:
            if p in msg:
                return False
        return True

# Apply telemetry filter to console only
try:
    console_handler.addFilter(TelemetryFilter())
except Exception:
    pass


class _StderrFilterWriter:
    """A file-like wrapper for stderr that filters lines containing given patterns."""
    def __init__(self, orig, patterns):
        self.orig = orig
        self.patterns = patterns

    def write(self, data):
        if not data:
            return
        for p in self.patterns:
            if p in data:
                return
        try:
            self.orig.write(data)
        except Exception:
            pass

    def flush(self):
        try:
            self.orig.flush()
        except Exception:
            pass
if TYPE_CHECKING:
    try:
        import chromadb  # type: ignore
        from chromadb.config import Settings  # type: ignore
    except Exception:
        pass
    # Stubs for optional heavy libraries so Pylance doesn't warn
    try:
        import imageio as _imageio  # type: ignore
    except Exception:
        pass
    try:
        import pygame as _pygame  # type: ignore
    except Exception:
        pass
    try:
        import diffusers as _diffusers  # type: ignore
    except Exception:
        pass
    try:
        import torch as _torch  # type: ignore
    except Exception:
        pass


from contextlib import contextmanager

@contextmanager
def suppress_stderr_patterns(patterns):
    orig = _sys.stderr
    try:
        _sys.stderr = _StderrFilterWriter(orig, patterns)
        yield
    finally:
        _sys.stderr = orig

### –ù–û–í–û–ï: –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º ChromaDB ###
class ChromaDBManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ChromaDB –¥–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    –∏ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    def __init__(self, db_path: str = "chroma_db", embedding_model: str = "all-MiniLM-L6-v2", use_gpu: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Args:
            db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ChromaDB
            embedding_model: –ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (784 —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏)
            use_gpu: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        """
        self.db_path = db_path
        self.embedding_model = embedding_model
        self.use_gpu = use_gpu
        self.client = None
        self.collection = None
        self.embedding_model_obj = None
        self.initialized = False
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(db_path, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ChromaDB
        self._initialize_chromadb()
    
    def _initialize_chromadb(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        try:
            if not CHROMADB_AVAILABLE:
                logger.warning("‚ö†Ô∏è ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç ChromaDB (–ø–æ–¥–∞–≤–ª—è–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –≤ stderr)
            with suppress_stderr_patterns(["Failed to send telemetry event", "capture() takes", "telemetry"]):
                self.client = chromadb.PersistentClient(
                    path=self.db_path,
                    settings=Settings(
                        anonymized_telemetry=False,
                        allow_reset=True
                    )
                )
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
            self.collection = self.client.get_or_create_collection(
                name="conversation_memory",
                metadata={"description": "–í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {self.embedding_model}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
            device = "cuda" if self.use_gpu and torch.cuda.is_available() else "cpu"
            logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU
            gpu_info = self.get_gpu_info()
            
            self.embedding_model_obj = SentenceTransformer(self.embedding_model, device=device)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            test_embedding = self.embedding_model_obj.encode("test")
            embedding_dim = len(test_embedding)
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {embedding_dim}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ
            if self.collection is None:
                logger.warning("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ChromaDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å count")
                count = 0
            else:
                count = self.collection.count()
            logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç {count} –∑–∞–ø–∏—Å–µ–π")
            
            self.initialized = True
            logger.info("‚úÖ ChromaDB —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChromaDB: {e}")
            self.initialized = False
    
    def get_gpu_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU –¥–ª—è ChromaDB
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ GPU
        """
        gpu_info = {
            "gpu_available": False,
            "gpu_name": None,
            "gpu_memory": None,
            "device_used": "cpu"
        }
        
        try:
            if torch.cuda.is_available():
                gpu_info["gpu_available"] = True
                gpu_info["gpu_name"] = torch.cuda.get_device_name(0)
                gpu_info["gpu_memory"] = torch.cuda.get_device_properties(0).total_memory / 1024**3  # GB
                gpu_info["device_used"] = "cuda" if self.use_gpu else "cpu"
                
                logger.info(f"üéÆ GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {gpu_info['gpu_name']}")
                logger.info(f"üíæ GPU –ø–∞–º—è—Ç—å: {gpu_info['gpu_memory']:.1f} GB")
            else:
                logger.info("üíª GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU: {e}")
            
        return gpu_info
    
    def add_conversation_memory(self, user_message: str, ai_response: str,
                               context: str = "", metadata: Optional[Dict[str, Any]] = None) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ai_response: –û—Ç–≤–µ—Ç –ò–ò
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.initialized:
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø–∏—Å–∏
            timestamp = int(time.time())
            record_id = f"conv_{timestamp}_{hash(user_message) % 10000}"
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
            combined_text = f"User: {user_message}\nAI: {ai_response}"
            if context:
                combined_text += f"\nContext: {context}"
            
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞)
            if not self.initialized or self.embedding_model_obj is None:
                logger.warning("‚ö†Ô∏è –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ ChromaDB")
                return False
            embedding = self.embedding_model_obj.encode(combined_text).tolist()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            record_metadata = {
                "timestamp": timestamp,
                "user_message": user_message,
                "ai_response": ai_response,
                "context": context,
                "type": "conversation"
            }
            
            if metadata:
                record_metadata.update(metadata)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                if self.collection is None:
                    logger.warning("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ChromaDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ add")
                    return False
                self.collection.add(
                embeddings=[embedding],
                documents=[combined_text],
                metadatas=[record_metadata],
                ids=[record_id]
            )
            
            logger.info(f"üíæ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ ChromaDB: {record_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ ChromaDB: {e}")
            return False
    
    def add_user_preference(self, preference_text: str, category: str = "general",
                           metadata: Optional[Dict[str, Any]] = None) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        
        Args:
            preference_text: –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.initialized:
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            timestamp = int(time.time())
            record_id = f"pref_{timestamp}_{hash(preference_text) % 10000}"
            
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞)
            if not self.initialized or self.embedding_model_obj is None:
                logger.warning("‚ö†Ô∏è –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")
                return False
            embedding = self.embedding_model_obj.encode(preference_text).tolist()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            record_metadata = {
                "timestamp": timestamp,
                "preference_text": preference_text,
                "category": category,
                "type": "preference"
            }
            
            if metadata:
                record_metadata.update(metadata)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                if self.collection is None:
                    logger.warning("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ChromaDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ add preference")
                    return False
                self.collection.add(
                embeddings=[embedding],
                documents=[preference_text],
                metadatas=[record_metadata],
                ids=[record_id]
            )
            
            logger.info(f"üíæ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –≤ ChromaDB: {record_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ ChromaDB: {e}")
            return False
    
    def search_similar_conversations(self, query: str, n_results: int = 5,
                                   similarity_threshold: float = None) -> List[Dict[str, Any]]:
        """
        –ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            n_results: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            similarity_threshold: –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –µ—Å–ª–∏ None)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        if not self.initialized:
            return []
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            if not self.initialized or self.embedding_model_obj is None:
                logger.warning("‚ö†Ô∏è –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–∏—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
                return []
            
            logger.info(f"üîç –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
            query_embedding = self.embedding_model_obj.encode(query).tolist()
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞)
            if self.collection is None:
                logger.warning("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ChromaDB –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∏—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
                return []
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
            search_results = max(n_results * 3, 15)
            results = self.collection.query(
                query_embeddings=[query_embedding],
                n_results=search_results,
                where={"type": "conversation"}  # type: ignore[arg-type]
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
            filtered_results = []
            found_count = 0
            
            # –ó–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–µ–π –∏–ª–∏ –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if isinstance(results, dict) and results:
                distances = results.get('distances')
                ids = results.get('ids')
                documents = results.get('documents')
                metadatas = results.get('metadatas')

                if distances and isinstance(distances, list) and distances and distances[0]:
                    logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(distances[0])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
                    if similarity_threshold is None:
                        similarities = [1 - d for d in distances[0]]
                        if similarities:
                            max_sim = max(similarities)
                            avg_sim = sum(similarities) / len(similarities)
                            
                            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥: –±–µ—Ä–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–æ –Ω–µ –≤—ã—à–µ 0.5
                            if max_sim > 0.1:
                                adaptive_threshold = min(avg_sim + 0.1, 0.3, max_sim - 0.05)
                            else:
                                adaptive_threshold = -0.2  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                            
                            logger.info(f"üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏: {adaptive_threshold:.3f} (–º–∞–∫—Å: {max_sim:.3f}, —Å—Ä–µ–¥–Ω: {avg_sim:.3f})")
                        else:
                            adaptive_threshold = 0.1
                    else:
                        adaptive_threshold = similarity_threshold
                    
                    for i, distance in enumerate(distances[0]):
                        # ChromaDB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ö–æ–∂–µ—Å—Ç—å
                        similarity = 1 - distance
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        if i < 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                            logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}: —Å—Ö–æ–∂–µ—Å—Ç—å={similarity:.3f}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ={distance:.3f}")
                        
                        if similarity >= adaptive_threshold:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                            doc = None
                            meta = None
                            idv = None
                            try:
                                idv = ids[0][i] if ids and ids[0] and len(ids[0]) > i else None
                                doc = documents[0][i] if documents and documents[0] and len(documents[0]) > i else None
                                meta = metadatas[0][i] if metadatas and metadatas[0] and len(metadatas[0]) > i else None
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {i}: {e}")
                                continue

                            result = {
                                'id': idv,
                                'document': doc,
                                'metadata': meta,
                                'similarity': similarity,
                                'distance': distance
                            }
                            filtered_results.append(result)
                            found_count += 1
                            
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            if found_count >= n_results:
                                break
                    
                    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–∂–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º, –±–µ—Ä–µ–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if not filtered_results and distances[0]:
                        logger.info(f"‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å –ø–æ—Ä–æ–≥–æ–º {adaptive_threshold:.3f}, –±–µ—Ä–µ–º {min(3, len(distances[0]))} –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                        best_results = min(3, len(distances[0]))
                        for i in range(best_results):
                            distance = distances[0][i]
                            similarity = 1 - distance
                            
                            try:
                                idv = ids[0][i] if ids and ids[0] and len(ids[0]) > i else None
                                doc = documents[0][i] if documents and documents[0] and len(documents[0]) > i else None
                                meta = metadatas[0][i] if metadatas and metadatas[0] and len(metadatas[0]) > i else None
                                
                                result = {
                                    'id': idv,
                                    'document': doc,
                                    'metadata': meta,
                                    'similarity': similarity,
                                    'distance': distance
                                }
                                filtered_results.append(result)
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {i}: {e}")
                else:
                    logger.warning("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ ChromaDB")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_results)} –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
            return filtered_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ ChromaDB: {e}")
            return []
    
    def search_user_preferences(self, query: str, category: Optional[str] = None,
                               n_results: int = 3) -> List[Dict[str, Any]]:
        """
        –ò—â–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            n_results: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        """
        if not self.initialized:
            return []
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            if not self.initialized or self.embedding_model_obj is None:
                logger.warning("‚ö†Ô∏è –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
                return []
            query_embedding = self.embedding_model_obj.encode(query).tolist()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
            where_condition = {"type": "preference"}
            if category:
                where_condition["category"] = category
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø–∏—Å–∏
            if self.collection is None:
                logger.warning("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ChromaDB –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
                return []
            results = self.collection.query(
                query_embeddings=[query_embedding],
                n_results=n_results,
                where=where_condition  # type: ignore[arg-type]
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            preferences = []
            if isinstance(results, dict) and results:
                docs = results.get('documents')
                distances = results.get('distances')
                ids = results.get('ids')
                metadatas = results.get('metadatas')

                if docs and isinstance(docs, list) and docs and docs[0]:
                    for i, document in enumerate(docs[0]):
                        try:
                            dist = distances[0][i] if distances and distances[0] and len(distances[0]) > i else None
                            sim = 1 - dist if dist is not None else 0.0
                            pref = {
                                'id': ids[0][i] if ids and ids[0] and len(ids[0]) > i else None,
                                'preference_text': document,
                                'metadata': metadatas[0][i] if metadatas and metadatas[0] and len(metadatas[0]) > i else {},
                                'similarity': sim
                            }
                            preferences.append(pref)
                        except Exception:
                            continue
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(preferences)} –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return preferences
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ ChromaDB: {e}")
            return []
    
    def get_conversation_context(self, query: str, max_context_length: int = 2000) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        
        Args:
            query: –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_context_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        if not self.initialized:
            return ""
        
        try:
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–∏–∞–ª–æ–≥–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º
            similar_conversations = self.search_similar_conversations(
                query, n_results=5, similarity_threshold=None  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥
            )
            
            if not similar_conversations:
                logger.info("üìö –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ""
            
            logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(similar_conversations)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_parts = []
            current_length = 0
            
            for i, conv in enumerate(similar_conversations):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                user_msg = ""
                ai_resp = ""
                
                if conv.get('metadata') and isinstance(conv['metadata'], dict):
                    user_msg = conv['metadata'].get('user_message', '')
                    ai_resp = conv['metadata'].get('ai_response', '')
                
                # –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if not user_msg and conv.get('document'):
                    doc = conv['document']
                    if 'User:' in doc and 'AI:' in doc:
                        parts = doc.split('AI:', 1)
                        if len(parts) >= 2:
                            user_part = parts[0].replace('User:', '').strip()
                            user_msg = user_part
                
                if user_msg:
                    conv_text = f"–ü–æ—Ö–æ–∂–∏–π –∑–∞–ø—Ä–æ—Å #{i+1} (—Å—Ö–æ–∂–µ—Å—Ç—å: {conv['similarity']:.3f}):\n"
                    conv_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_msg[:200]}{'...' if len(user_msg) > 200 else ''}\n"
                    
                    if ai_resp and len(ai_resp) < 300:  # –í–∫–ª—é—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
                        clean_ai_resp = ai_resp.replace('<think>', '').replace('</think>', '')
                        if len(clean_ai_resp) < 200:
                            conv_text += f"–û—Ç–≤–µ—Ç: {clean_ai_resp[:150]}{'...' if len(clean_ai_resp) > 150 else ''}\n"
                    
                    conv_text += "\n"
                    
                    if current_length + len(conv_text) <= max_context_length:
                        context_parts.append(conv_text)
                        current_length += len(conv_text)
                    else:
                        break
            
            context = "".join(context_parts)
            if context:
                logger.info(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(context)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {len(context_parts)} –¥–∏–∞–ª–æ–≥–æ–≤")
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ ChromaDB: {e}")
            return ""
    
    def get_user_preferences_summary(self, query: Optional[str] = None) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            query: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—é–º–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        """
        if not self.initialized:
            return ""
        
        try:
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            if query:
                preferences = self.search_user_preferences(query, n_results=5)
            else:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                results = self.collection.get(where={"type": "preference"})  # type: ignore[arg-type]
                preferences = []
                if isinstance(results, dict) and results:
                    docs = results.get('documents')
                    metadatas = results.get('metadatas')
                    if docs:
                        for i, doc in enumerate(docs):
                            pref_meta = metadatas[i] if metadatas and len(metadatas) > i else {}
                            preference = {
                                'preference_text': doc,
                                'metadata': pref_meta,
                                'similarity': 1.0  # –î–ª—è –æ–±—â–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
                            }
                            preferences.append(preference)
            
            if not preferences:
                return ""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
            summary_parts = ["–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"]
            
            for pref in preferences[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
                category = pref['metadata'].get('category', 'general')
                summary_parts.append(f"- {category}: {pref['preference_text'][:100]}...")
            
            summary = "\n".join(summary_parts)
            logger.info(f"üìã –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∑—é–º–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª–∏–Ω–æ–π {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
            return summary
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
            return ""
    
    def cleanup_old_records(self, days_to_keep: int = 30) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            days_to_keep: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        if not self.initialized:
            return 0
        
        try:
            cutoff_timestamp = int(time.time()) - (days_to_keep * 24 * 60 * 60)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            if self.collection is None:
                logger.warning("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ChromaDB –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –æ—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                return 0
            results = self.collection.get()

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–µ–π/–ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if not isinstance(results, dict) or not results:
                return 0

            ids = results.get('ids')
            metadatas = results.get('metadatas')
            if not ids:
                return 0

            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            ids_to_delete = []
            if metadatas:
                for i, metadata in enumerate(metadatas):
                    timestamp = metadata.get('timestamp', 0) if isinstance(metadata, dict) else 0
                    if timestamp < cutoff_timestamp:
                        # –ó–∞—â–∏—â–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ ids
                        if ids and len(ids) > i:
                            ids_to_delete.append(ids[i])
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            if ids_to_delete:
                if self.collection is None:
                    logger.warning("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ChromaDB –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
                    return 0
                self.collection.delete(ids=ids_to_delete)
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(ids_to_delete)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ ChromaDB")
                return len(ids_to_delete)
            
            return 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ChromaDB: {e}")
            return 0
    
    def get_database_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not self.initialized:
            return {"error": "ChromaDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        try:
            if self.collection is None:
                logger.warning("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ChromaDB –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return {"error": "ChromaDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

            total_count = self.collection.count()
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
            conversations = self.collection.get(where={"type": "conversation"})  # type: ignore[arg-type]
            preferences = self.collection.get(where={"type": "preference"})  # type: ignore[arg-type]

            conv_ids = conversations.get('ids') if isinstance(conversations, dict) else None
            pref_ids = preferences.get('ids') if isinstance(preferences, dict) else None

            stats = {
                "total_records": total_count,
                "conversations": len(conv_ids) if conv_ids else 0,
                "preferences": len(pref_ids) if pref_ids else 0,
                "database_path": self.db_path,
                "embedding_model": self.embedding_model
            }
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ChromaDB: {e}")
            return {"error": str(e)}

### –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ###
def image_to_base64_balanced(image_path: str, max_size=(500, 500), palette_colors=12) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PNG base64 –±–µ–∑ —á/–± –∏ quantize, —Ç–æ–ª—å–∫–æ —Ä–µ—Å–∞–π–∑ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ).
    """
    try:
        with Image.open(image_path) as img:
            img = img.convert("RGB")
            img.thumbnail(max_size, Image.Resampling.LANCZOS)
            buf = BytesIO()
            img.save(buf, format="PNG", optimize=True)
            return base64.b64encode(buf.getvalue()).decode("ascii")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (balanced) {image_path}: {e}")
        return ""

class AIOrchestrator:
    def extract_video_frames(self, video_path: str, fps: int = 1) -> list:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É –∫–∞–¥—Ä—É –Ω–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤–∏–¥–µ–æ (fps=1).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–∞–π–º–∫–æ–¥, base64 PNG).
        """
        frames = []
        temp_dir = tempfile.mkdtemp()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ffprobe
            cmd = [
                'ffprobe', '-v', 'error', '-show_entries', 'format=duration',
                '-of', 'default=noprint_wrappers=1:nokey=1', video_path
            ]
            result = subprocess.run(cmd, capture_output=True, text=True)
            duration = float(result.stdout.strip()) if result.returncode == 0 else 0
            if duration == 0:
                return []
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä—ã —Å –ø–æ–º–æ—â—å—é ffmpeg
            # -vf fps=1: –ø–æ –æ–¥–Ω–æ–º—É –∫–∞–¥—Ä—É –≤ —Å–µ–∫—É–Ω–¥—É
            frame_pattern = os.path.join(temp_dir, 'frame_%05d.png')
            cmd = [
                'ffmpeg', '-i', video_path, '-vf', f'fps={fps}', '-q:v', '2', frame_pattern, '-hide_banner', '-loglevel', 'error'
            ]
            subprocess.run(cmd, check=True)
            # –°–æ–±–∏—Ä–∞–µ–º –∫–∞–¥—Ä—ã –∏ —Ç–∞–π–º–∫–æ–¥—ã
            total_frames = int(math.ceil(duration))
            for i in range(1, total_frames + 1):
                frame_path = os.path.join(temp_dir, f'frame_{i:05d}.png')
                if not os.path.exists(frame_path):
                    continue
                # –¢–∞–π–º–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [HH:MM:SS]
                sec = i - 1
                h = sec // 3600
                m = (sec % 3600) // 60
                s = sec % 60
                timecode = f"[{h:02}:{m:02}:{s:02}]"
                # base64 —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
                b64 = image_to_base64_balanced(frame_path)
                frames.append((timecode, b64))
            return frames
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤: {e}")
            return []
        finally:
            shutil.rmtree(temp_dir, ignore_errors=True)
    def download_youtube_video(self, url: str, out_dir: Optional[str] = None) -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å YouTube –ø–æ —Å—Å—ã–ª–∫–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç yt-dlp)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ mp4-—Ñ–∞–π–ª—É –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        """
        if out_dir is None:
            out_dir = os.path.join(os.path.dirname(__file__), "Video")
        os.makedirs(out_dir, exist_ok=True)
        out_path = os.path.join(out_dir, "yt_video.%(ext)s")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies
        cookies_path = self.get_youtube_cookies_path()
        use_cookies = False
        
        if cookies_path and self.check_cookies_validity(cookies_path):
            use_cookies = True
            self.logger.info("üç™ –ò—Å–ø–æ–ª—å–∑—É—é cookies –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ YouTube")
        else:
            self.logger.info("‚ÑπÔ∏è Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            if not cookies_path:
                self.suggest_cookies_update()
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è yt-dlp
        base_cmd = [
            "yt-dlp",
            "--force-ipv4",
            "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "--extractor-args", "youtube:player_client=android",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Android –∫–ª–∏–µ–Ω—Ç
            "--no-check-certificate",  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL –æ—à–∏–±–∫–∏
            "--prefer-insecure",  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º HTTP
            "--geo-bypass",  # –û–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            "--geo-bypass-country", "US",  # –°—Ç—Ä–∞–Ω–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞
            "-f", "bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4/best[ext=mp4]/best",
            "-o", out_path
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if cookies_path:
            base_cmd.extend(["--cookies", str(cookies_path)])  # type: ignore[arg-type]
        
        # –î–æ–±–∞–≤–ª—è–µ–º URL –≤ –∫–æ–Ω–µ—Ü
        cmd = base_cmd + [url]
        
        try:
            self.logger.info(f"–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ —Å YouTube: {url}")
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–∏—è
            cmd_str = " ".join(cmd)
            self.logger.info(f"–ö–æ–º–∞–Ω–¥–∞: {cmd_str}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=300)
            
            if result.stdout:
                self.logger.info(f"yt-dlp stdout: {result.stdout}")
            if result.stderr:
                self.logger.warning(f"yt-dlp stderr: {result.stderr}")
            
            # –ù–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            for fname in os.listdir(out_dir):
                if fname.startswith("yt_video") and fname.endswith('.mp4'):
                    self.logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {fname}")
                    return os.path.join(out_dir, fname)
            
            self.logger.warning("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return ""
            
        except subprocess.TimeoutExpired:
            self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ (5 –º–∏–Ω—É—Ç)")
            return ""
        except subprocess.CalledProcessError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ yt-dlp: {e}")
            if e.stderr:
                self.logger.error(f"stderr: {e.stderr}")
            return ""
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self.logger.info("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
            try:
                alt_cmd = [
                    "yt-dlp",
                    "--force-ipv4",
                    "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                    "--extractor-args", "youtube:player_client=web",
                    "--no-check-certificate",
                    "--geo-bypass",
                    "--geo-bypass-country", "US",
                    "-f", "best[ext=mp4]/best",
                    "-o", out_path
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                if cookies_path:
                    alt_cmd.extend(["--cookies", str(cookies_path)])  # type: ignore[arg-type]
                
                alt_cmd.append(url)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                alt_cmd_str = " ".join(alt_cmd)
                self.logger.info(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {alt_cmd_str}")
                result = subprocess.run(alt_cmd, check=True, capture_output=True, text=True, timeout=300)
                
                # –ù–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                for fname in os.listdir(out_dir):
                    if fname.startswith("yt_video") and fname.endswith('.mp4'):
                        self.logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: {fname}")
                        return os.path.join(out_dir, fname)
                        
            except Exception as alt_e:
                self.logger.error(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {alt_e}")
                
                # –ü—Ä–æ–±—É–µ–º —Ç—Ä–µ—Ç–∏–π –º–µ—Ç–æ–¥ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                self.logger.info("üîÑ –ü—Ä–æ–±—É—é —Ç—Ä–µ—Ç–∏–π –º–µ—Ç–æ–¥ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)...")
                try:
                    simple_cmd = [
                        "yt-dlp",
                        "--force-ipv4",
                        "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                        "--no-check-certificate",
                        "-f", "best",
                        "-o", out_path
                    ]
                    # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                    if use_cookies and cookies_path:
                        simple_cmd.extend(["--cookies", str(cookies_path)])  # type: ignore[arg-type]

                    simple_cmd.append(url)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                    simple_cmd_str = " ".join(simple_cmd)
                    self.logger.info(f"–¢—Ä–µ—Ç–∏–π –º–µ—Ç–æ–¥: {simple_cmd_str}")
                    result = subprocess.run(simple_cmd, check=True, capture_output=True, text=True, timeout=300)
                    
                    # –ù–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                    for fname in os.listdir(out_dir):
                        if fname.startswith("yt_video") and fname.endswith('.mp4'):
                            self.logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ —Ç—Ä–µ—Ç—å–∏–º –º–µ—Ç–æ–¥–æ–º: {fname}")
                            return os.path.join(out_dir, fname)
                            
                except Exception as simple_e:
                    self.logger.error(f"‚ùå –¢—Ä–µ—Ç–∏–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {simple_e}")
            
            return ""
    
    def check_vpn_status(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å VPN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        """
        try:
            import requests
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å
            response = requests.get("https://ifconfig.me", timeout=10)
            if response.status_code == 200:
                ip = response.text.strip()
                self.logger.info(f"üåê –¢–µ–∫—É—â–∏–π IP –∞–¥—Ä–µ—Å: {ip}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑ –†–§ –ª–∏ IP
                ru_ips = ["185.", "31.", "46.", "37.", "95.", "178.", "79.", "5.", "176.", "195."]
                if any(ip.startswith(prefix) for prefix in ru_ips):
                    self.logger.warning("‚ö†Ô∏è IP –∞–¥—Ä–µ—Å –ø–æ—Ö–æ–∂ –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π. VPN –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                    return False
                else:
                    self.logger.info("‚úÖ IP –∞–¥—Ä–µ—Å –Ω–µ –∏–∑ –†–§. VPN —Ä–∞–±–æ—Ç–∞–µ—Ç.")
                    return True
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IP: {response.status_code}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VPN: {e}")
            return False

    def get_youtube_info(self, url: str) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ YouTube –≤–∏–¥–µ–æ –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        """
        try:
            import json
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies
            cookies_path = self.get_youtube_cookies_path()
            use_cookies = False
            
            if cookies_path and self.check_cookies_validity(cookies_path):
                use_cookies = True
                self.logger.info("üç™ –ò—Å–ø–æ–ª—å–∑—É—é cookies –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ")
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è yt-dlp
            base_cmd = [
                "yt-dlp",
                "--force-ipv4",
                "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "--extractor-args", "youtube:player_client=android",
                "--no-check-certificate",
                "--geo-bypass",
                "--dump-json"
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if use_cookies:
                base_cmd.extend(["--cookies", str(cookies_path)])  # type: ignore[arg-type]
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL –≤ –∫–æ–Ω–µ—Ü
            cmd = base_cmd + [url]
            
            self.logger.info("üìã –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ YouTube –≤–∏–¥–µ–æ...")
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0 and result.stdout:
                try:
                    import json
                    info = json.loads(result.stdout)
                    title = info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ')
                    duration = info.get('duration', 0)
                    uploader = info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
                    
                    self.logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {title} ({duration}—Å) –æ—Ç {uploader}")
                    return {
                        'title': title,
                        'duration': duration,
                        'uploader': uploader,
                        'success': True
                    }
                except json.JSONDecodeError:
                    self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ")
                    return {'success': False, 'error': 'JSON parse error'}
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {result.stderr}")
                
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ Android –∫–ª–∏–µ–Ω—Ç–∞
                self.logger.info("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
                try:
                    alt_cmd = [
                        "yt-dlp",
                        "--force-ipv4",
                        "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                        "--extractor-args", "youtube:player_client=web",
                        "--no-check-certificate",
                        "--geo-bypass",
                        "--dump-json"
                    ]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                    if use_cookies:
                        alt_cmd.extend(["--cookies", str(cookies_path)])  # type: ignore[arg-type]
                    
                    alt_cmd.append(url)
                    
                    self.logger.info("üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
                    alt_result = subprocess.run(alt_cmd, capture_output=True, text=True, timeout=60)
                    
                    if alt_result.returncode == 0 and alt_result.stdout:
                        try:
                            import json
                            info = json.loads(alt_result.stdout)
                            title = info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ')
                            duration = info.get('duration', 0)
                            uploader = info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
                            
                            self.logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: {title} ({duration}—Å) –æ—Ç {uploader}")
                            return {
                                'title': title,
                                'duration': duration,
                                'uploader': uploader,
                                'success': True
                            }
                        except json.JSONDecodeError:
                            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º")
                            return {'success': False, 'error': 'JSON parse error (alt method)'}
                    else:
                        self.logger.error(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {alt_result.stderr}")
                        return {'success': False, 'error': result.stderr}
                        
                except Exception as alt_e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {alt_e}")
                    return {'success': False, 'error': result.stderr}
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
            return {'success': False, 'error': str(e)}

    def check_youtube_accessibility(self, url: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YouTube —Å—Å—ã–ª–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies
            cookies_path = self.get_youtube_cookies_path()
            use_cookies = False
            
            if cookies_path and self.check_cookies_validity(cookies_path):
                use_cookies = True
                self.logger.info("üç™ –ò—Å–ø–æ–ª—å–∑—É—é cookies –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è yt-dlp
            base_cmd = [
                "yt-dlp",
                "--force-ipv4",
                "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "--extractor-args", "youtube:player_client=android",
                "--no-check-certificate",
                "--geo-bypass",
                "--list-formats"
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if use_cookies:
                base_cmd.extend(["--cookies", str(cookies_path)])  # type: ignore[arg-type]
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL –≤ –∫–æ–Ω–µ—Ü
            test_cmd = base_cmd + [url]
            
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YouTube —Å—Å—ã–ª–∫—É...")
            result = subprocess.run(test_cmd, capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                self.logger.info("‚úÖ YouTube —Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
                return True
            else:
                self.logger.warning(f"‚ö†Ô∏è YouTube —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {result.stderr}")
                
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å web –∫–ª–∏–µ–Ω—Ç–æ–º
                self.logger.info("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                try:
                    alt_test_cmd = [
                        "yt-dlp",
                        "--force-ipv4",
                        "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                        "--extractor-args", "youtube:player_client=web",
                        "--no-check-certificate",
                        "--geo-bypass",
                        "--list-formats"
                    ]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                    if use_cookies:
                        alt_test_cmd.extend(["--cookies", str(cookies_path)])  # type: ignore[arg-type]
                    
                    alt_test_cmd.append(url)
                    
                    alt_result = subprocess.run(alt_test_cmd, capture_output=True, text=True, timeout=60)
                    
                    if alt_result.returncode == 0:
                        self.logger.info("‚úÖ YouTube —Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥")
                        return True
                    else:
                        self.logger.warning(f"‚ö†Ô∏è YouTube —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: {alt_result.stderr}")
                        return False
                        
                except Exception as alt_e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {alt_e}")
                    return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ YouTube: {e}")
            return False

    def _auto_load_brain_model(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –º–æ–∑–≥–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
            try:
                resp = requests.get(f"{self.lm_studio_url}/v1/models", timeout=10)
                if resp.status_code == 200:
                    data = resp.json()
                    model_loaded = False
                    for m in data.get("data", []):
                        if self.brain_model in m.get("id", "") and m.get("isLoaded", False):
                            model_loaded = True
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –º–æ–¥–µ–ª–∏ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
                            self.brain_model_id = m.get("id")
                            self.logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –º–æ–∑–≥–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {os.path.basename(self.brain_model)} (ID: {self.brain_model_id})")
                            return
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π: {resp.status_code}")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π: {e}")
            
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
            self.logger.info(f"üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å –º–æ–∑–≥–∞: {os.path.basename(self.brain_model)}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ API
            payload = {
                "model": self.brain_model,
                "load": True
            }
            
            try:
                resp = requests.post(f"{self.lm_studio_url}/v1/models/load", json=payload, timeout=30)
                if resp.status_code == 200:
                    self.logger.info("‚úÖ –ú–æ–¥–µ–ª—å –º–æ–∑–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ API")
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    self._update_brain_model_id()
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ API: {resp.status_code}")
                    # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ LM Studio
                    self.launch_model(self.brain_model)
                    self.logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ LM Studio...")
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
                    self._update_brain_model_id()
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
                # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ LM Studio
                self.launch_model(self.brain_model)
                self.logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ LM Studio...")
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
                self._update_brain_model_id()
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –º–æ–∑–≥–∞: {e}")
    
    def _update_brain_model_id(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ID –º–æ–¥–µ–ª–∏ –º–æ–∑–≥–∞ –∏–∑ API"""
        try:
            resp = requests.get(f"{self.lm_studio_url}/v1/models", timeout=10)
            if resp.status_code == 200:
                data = resp.json()
                for m in data.get("data", []):
                    if self.brain_model in m.get("id", "") and m.get("isLoaded", False):
                        self.brain_model_id = m.get("id")
                        self.logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω ID –º–æ–¥–µ–ª–∏ –º–æ–∑–≥–∞: {self.brain_model_id}")
                        return
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID")
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID: {resp.status_code}")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID –º–æ–¥–µ–ª–∏ –º–æ–∑–≥–∞: {e}")
    
    def _check_ffmpeg(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ"""
        try:
            result = subprocess.run(['ffmpeg', '-version'], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                self.logger.info("‚úÖ ffmpeg –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            else:
                self.logger.warning("‚ö†Ô∏è ffmpeg –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω")
        except (subprocess.CalledProcessError, FileNotFoundError):
            self.logger.warning("‚ö†Ô∏è ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
            self.logger.info("üí° –°–∫–∞—á–∞–π—Ç–µ —Å https://ffmpeg.org/download.html")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ffmpeg: {e}")
    
    def is_model_running(self, model_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å –≤ LM Studio —á–µ—Ä–µ–∑ /v1/models
        """
        try:
            resp = requests.get(f"{self.lm_studio_url}/v1/models")
            if resp.status_code == 200:
                data = resp.json()
                for m in data.get("data", []):
                    if model_name in m.get("id", "") and m.get("isLoaded", False):
                        return True
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
            return False

    def get_model_context_info(self) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –º–æ–¥–µ–ª–∏ –∏–∑ LM Studio API
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å max_context –∏ safe_context
        """
        try:
            resp = requests.get(f"{self.lm_studio_url}/v1/models", timeout=10)
            if resp.status_code == 200:
                data = resp.json()
                
                # –ò—â–µ–º –Ω–∞—à—É –º–æ–¥–µ–ª—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                target_model = None
                search_terms = ["huihui-qwen3-4b-thinking", "qwen3-4b", "thinking"]
                
                for m in data.get("data", []):
                    model_id = m.get("id", "").lower()
                    for term in search_terms:
                        if term.lower() in model_id:
                            target_model = m
                            self.logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å: {m.get('id')}")
                            break
                    if target_model:
                        break
                
                if target_model:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
                    context_info = self._get_context_info_via_chat(target_model.get("id"))
                    if context_info:
                        return context_info
                    
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    if not hasattr(self, 'brain_model_id') or not self.brain_model_id:
                        self.brain_model_id = target_model.get("id")
                        self.logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω ID –º–æ–¥–µ–ª–∏ –º–æ–∑–≥–∞: {self.brain_model_id}")
                
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –º–æ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return {
                "max_context": 262144,
                "safe_context": 32768
            }
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –º–æ–¥–µ–ª–∏: {e}")
            return {
                "max_context": 262144,
                "safe_context": 32768
            }

    def _get_context_info_via_chat(self, model_id: str) -> Optional[Dict[str, int]]:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
        """
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
            payload = {
                "model": model_id,
                "messages": [{"role": "user", "content": "Hello"}],
                "max_tokens": 1,
                "temperature": 0
            }
            
            resp = requests.post(f"{self.lm_studio_url}/v1/chat/completions", json=payload, timeout=10)
            
            if resp.status_code == 200:
                data = resp.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ stats
                stats = data.get("stats", {})
                if stats:
                    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤ stats
                    context_length = None
                    if "context_length" in stats:
                        context_length = stats["context_length"]
                    elif "max_context" in stats:
                        context_length = stats["max_context"]
                    elif "max_tokens" in stats:
                        context_length = stats["max_tokens"]
                    
                    if context_length:
                        safe_context = max(context_length // 8, 32768)
                        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω context_length –≤ stats: {context_length}")
                        return {
                            "max_context": context_length,
                            "safe_context": safe_context
                        }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                for key, value in data.items():
                    if isinstance(value, dict) and ("context" in key.lower() or "token" in key.lower()):
                        self.logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ {key}: {value}")
                
                self.logger.debug("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏")
                return None
            else:
                self.logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: {resp.status_code}")
                return None
                
        except Exception as e:
            self.logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —á–∞—Ç: {e}")
            return None

    def _initialize_dynamic_context(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
        """
        try:
            context_info = self.get_model_context_info()
            self.max_context_length = context_info["max_context"]
            self.safe_context_length = context_info["safe_context"]
            self.logger.info(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –º–∞–∫—Å–∏–º—É–º {self.max_context_length:,}, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π {self.safe_context_length:,}")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.max_context_length = 262144
            self.safe_context_length = 32768

    def _trim_context_if_needed(self):
        """
        –û–±—Ä–µ–∑–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç self.current_context_length (total_tokens) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        if self.current_context_length > self.max_context_length:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞
            self.conversation_history = self.conversation_history[-2:]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
            self.logger.warning(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ({self.current_context_length:,} > {self.max_context_length:,}) - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏")
        elif self.current_context_length > self.safe_context_length:
            # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ - –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞
            self.conversation_history = self.conversation_history[-5:]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ({self.current_context_length:,} > {self.safe_context_length:,}) - –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏")
        elif self.current_context_length > self.safe_context_length * 0.8:
            # –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –ª–∏–º–∏—Ç—É - –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–µ–∑–∫–∞
            self.conversation_history = self.conversation_history[-10:]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.logger.info(f"–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –ª–∏–º–∏—Ç—É ({self.current_context_length:,} > {self.safe_context_length * 0.8:,}) - –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏")

    def launch_model(self, model_path: str):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ LM Studio (–ª–æ–∫–∞–ª—å–Ω–æ, subprocess)
        """
        try:
            # threading —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
            lmstudio_exe = os.getenv("LMSTUDIO_EXE", r"C:\Program Files\LM Studio\LM Studio.exe")
            self.logger.info(f"–ó–∞–ø—É—Å–∫–∞—é –º–æ–¥–µ–ª—å: {model_path}")
            threading.Thread(target=lambda: os.system(f'"{lmstudio_exe}" --model "{model_path}"'), daemon=True).start()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–µ–ª–∏: {e}")

    def ask_qwen(self, question: str) -> Optional[str]:
        """–ó–∞–ø—Ä–æ—Å –∫ Qwen –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–∑–≥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–æ–≤
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–∑–≥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–æ–≤
        image_model = self.brain_model_id if hasattr(self, 'brain_model_id') and self.brain_model_id else self.brain_model
        payload = {
            "model": image_model,
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è Stable Diffusion. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–ê–ñ–ù–û: prompt –∏ negative_prompt –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞! –§–æ—Ä–º–∏—Ä—É–π –ø—Ä–æ–º—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {\"prompt\":..., \"negative_prompt\":..., \"params\":{...}}. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ!"},
                {"role": "user", "content": f"–í–æ–ø—Ä–æ—Å: {question}\n\n–í–ê–ñ–ù–û: prompt –∏ negative_prompt –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ! –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞!"}
            ],
            "temperature": 0.2,
            "max_tokens": 1024,
            "stream": False
        }
        try:
            resp = requests.post(f"{self.lm_studio_url}/v1/chat/completions", json=payload, headers={"Content-Type": "application/json"})
            if resp.status_code == 200:
                result = resp.json()
                return result["choices"][0]["message"]["content"].strip()
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ Qwen: {resp.status_code} - {resp.text}")
                return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Qwen: {e}")
            return None

    def get_youtube_cookies_path(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É cookies –¥–ª—è YouTube
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        cookies_file = "youtube_cookies.txt"
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        cookies_path = os.path.join(os.getcwd(), cookies_file)
        if os.path.exists(cookies_path) and os.path.getsize(cookies_path) > 0:
            self.logger.info(f"üç™ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª cookies –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {cookies_file}")
            return cookies_path
        
        # –ó–∞—Ç–µ–º –∏—â–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
        cookies_path = os.path.join(os.path.dirname(__file__), cookies_file)
        if os.path.exists(cookies_path) and os.path.getsize(cookies_path) > 0:
            self.logger.info(f"üç™ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª cookies –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {cookies_file}")
            return cookies_path
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ
        self.logger.info(f"‚ÑπÔ∏è –§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω: {cookies_file}")
        return None

    def check_cookies_validity(self, cookies_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ cookies
        """
        try:
            with open(cookies_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if not content.strip():
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ YouTube –¥–æ–º–µ–Ω–æ–≤
            youtube_domains = ['youtube.com', '.youtube.com', 'google.com', '.google.com']
            has_youtube = any(domain in content for domain in youtube_domains)
            
            if not has_youtube:
                self.logger.warning("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ–º–µ–Ω—ã YouTube")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–∞–±—É–ª—è—Ü–∏–∏)
            if '\t' not in content:
                self.logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ cookies (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±—É–ª—è—Ü–∏–∏)")
                return False
                
            self.logger.info("‚úÖ –§–∞–π–ª cookies –≤–∞–ª–∏–¥–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ cookies: {e}")
            return False

    def suggest_cookies_update(self):
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±–Ω–æ–≤–∏—Ç—å cookies
        """
        self.logger.info("üí° –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å YouTube —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
        self.logger.info("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python extract_chrome_cookies.py")
        self.logger.info("   2. –ó–∞–∫—Ä—ã—Ç—å Chrome –ø–µ—Ä–µ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º")
        self.logger.info("   3. –í–æ–π—Ç–∏ –≤ YouTube —á–µ—Ä–µ–∑ VPN")
        self.logger.info("   4. Cookies –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 2-3 –º–µ—Å—è—Ü–∞")

    def generate_image_stable_diffusion(self, prompt: str, negative_prompt: str, params: dict) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ Stable Diffusion"""
        start_time = time.time()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not getattr(self, 'use_image_generation', False):
            self.logger.info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            self.use_image_generation = True
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            self.auto_disable_tools("image_generation")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_params = {
            "seed": -1,
            "steps": 30,
            "width": 1024,
            "height": 1024,
            "cfg": 7.0,
            "sampler_name": "dpmpp_2m",
            "scheduler": "karras"
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        gen_params = default_params.copy()
        gen_params.update(params)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º seed –µ—Å–ª–∏ –æ–Ω -1
        if gen_params["seed"] == -1:
            import random
            gen_params["seed"] = random.randint(0, 2**32 - 1)
            self.logger.info(f"üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π seed: {gen_params['seed']}")
        
        self.logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {gen_params}")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            self._install_diffusers_dependencies()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–º–æ–¥—É–ª–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Pylance)
            from diffusers.pipelines.stable_diffusion.pipeline_stable_diffusion import StableDiffusionPipeline  # type: ignore
            from diffusers.schedulers.scheduling_dpmsolver_multistep import DPMSolverMultistepScheduler  # type: ignore
            import torch
            
            # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
            model_path = os.getenv("STABLE_DIFFUSION_MODEL_PATH", "J:\\ComfyUI\\models\\checkpoints\\novaAnime_v20.safetensors")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            if not os.path.exists(model_path):
                self.logger.error(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
                return None
            
            self.logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å: {model_path}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º pipeline
            pipe = StableDiffusionPipeline.from_single_file(
                model_path,
                torch_dtype=torch.float16,
                use_safetensors=True
            )
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ GPU –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if torch.cuda.is_available():
                pipe = pipe.to("cuda")
                self.logger.info("üöÄ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ GPU")
            else:
                self.logger.warning("‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é CPU")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º scheduler
            if gen_params["sampler_name"] == "dpmpp_2m":
                pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
                self.logger.info("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é DPMSolverMultistepScheduler")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.logger.info(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {prompt[:50]}...")

            result = pipe(
                prompt=prompt,
                negative_prompt=negative_prompt,
                num_inference_steps=gen_params["steps"],
                guidance_scale=gen_params["cfg"],
                width=gen_params["width"],
                height=gen_params["height"],
                generator=torch.Generator(device="cuda" if torch.cuda.is_available() else "cpu").manual_seed(gen_params["seed"])
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç pipe –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º images –∏–ª–∏ –∫–æ—Ä—Ç–µ–∂–µ–º (image, extras)
            image = None
            try:
                imgs = getattr(result, 'images', None)
                if imgs:
                    image = imgs[0]
                elif isinstance(result, (tuple, list)) and len(result) > 0:
                    image = result[0]
            except Exception:
                image = None

            if image is None:
                raise RuntimeError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ pipeline')

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ image ‚Äî numpy array –∏–ª–∏ torch tensor, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL.Image
            try:
                import numpy as _np
                try:
                    import torch as _torch
                except Exception:
                    _torch = None

                if hasattr(image, 'save'):
                    img_to_save = image
                elif _np and isinstance(image, _np.ndarray):
                    img_to_save = Image.fromarray(image.astype('uint8'))
                elif _torch and _torch.is_tensor(image):
                    arr = image.detach().cpu().numpy()
                    img_to_save = Image.fromarray(arr.astype('uint8'))
                else:
                    # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–º —Å–ø–æ—Å–æ–±–æ–º
                    img_to_save = Image.fromarray(_np.array(image).astype('uint8'))
            except Exception:
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é ‚Äî –ø—É—Å—Ç—å –≤—ã–∑–æ–≤ .save –≤—ã–±—Ä–æ—Å–∏—Ç –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
                img_to_save = image
            # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ img_to_save —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ PIL.Image
            try:
                from typing import cast
                img_to_save = cast(Image.Image, img_to_save)
            except Exception:
                pass
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            output_dir = os.path.join(os.path.dirname(__file__), "Images", "generated")
            os.makedirs(output_dir, exist_ok=True)
            
            filename = f"ConsoleTest_{gen_params['seed']}.png"
            output_path = os.path.join(output_dir, filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PIL.Image
            try:
                # –ï—Å–ª–∏ —É–∂–µ PIL.Image
                if isinstance(img_to_save, Image.Image):
                    img_to_save.save(output_path)
                    self.logger.info(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–∫ PIL
                    if isinstance(image, Image.Image):
                        image.save(output_path)
                        self.logger.info(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (fallback): {output_path}")
                    else:
                        import numpy as _np
                        Image.fromarray(_np.array(image).astype('uint8')).save(output_path)
                        self.logger.info(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (converted fallback): {output_path}")
            except Exception:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                subprocess.run(["start", output_path], shell=True, check=True)
                self.logger.info("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç–æ")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            buf = BytesIO()
            try:
                if isinstance(img_to_save, Image.Image):
                    img_to_save.save(buf, format="PNG")
                elif isinstance(image, Image.Image):
                    image.save(buf, format="PNG")
                else:
                    import numpy as _np
                    Image.fromarray(_np.array(image).astype('uint8')).save(buf, format="PNG")
            except Exception:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä PNG")
            img_b64 = base64.b64encode(buf.getvalue()).decode("ascii")
            
            return img_b64
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return None
        finally:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            response_time = time.time() - start_time
            self.add_performance_metric("image_generation", response_time)
            self.logger.info(f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {response_time:.2f} —Å–µ–∫")

    def generate_video_stable_diffusion(self, prompt: str, negative_prompt: str, params: dict) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ Stable Diffusion"""
        start_time = time.time()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not getattr(self, 'use_image_generation', False):
            self.logger.info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            self.use_image_generation = True
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            self.auto_disable_tools("image_generation")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤–∏–¥–µ–æ
        default_params = {
            "seed": -1,
            "steps": 20,
            "width": 512,
            "height": 512,
            "cfg": 7.0,
            "num_frames": 24,
            "fps": 8,
            "key_frames": 4
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        gen_params = default_params.copy()
        gen_params.update(params)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º seed –µ—Å–ª–∏ –æ–Ω -1
        if gen_params["seed"] == -1:
            import random
            gen_params["seed"] = random.randint(0, 2**32 - 1)
            self.logger.info(f"üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π seed: {gen_params['seed']}")
        
        self.logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {gen_params}")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            self._install_diffusers_dependencies()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–º–æ–¥—É–ª–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Pylance)
            from diffusers.pipelines.stable_diffusion.pipeline_stable_diffusion import StableDiffusionPipeline  # type: ignore
            from diffusers.schedulers.scheduling_dpmsolver_multistep import DPMSolverMultistepScheduler  # type: ignore
            import torch
            from PIL import Image
            import numpy as np
            import imageio  # type: ignore
            
            # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
            model_path = os.getenv("STABLE_DIFFUSION_MODEL_PATH", "J:\\ComfyUI\\models\\checkpoints\\novaAnime_v20.safetensors")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            if not os.path.exists(model_path):
                self.logger.error(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
                return None
            
            self.logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å: {model_path}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º pipeline
            pipe = StableDiffusionPipeline.from_single_file(
                model_path,
                torch_dtype=torch.float16,
                use_safetensors=True
            )
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ GPU –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if torch.cuda.is_available():
                pipe = pipe.to("cuda")
                self.logger.info("üöÄ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ GPU")
            else:
                self.logger.warning("‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é CPU")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º scheduler
            pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
            self.logger.info("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é DPMSolverMultistepScheduler")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_config = {
                "width": gen_params["width"],
                "height": gen_params["height"],
                "num_inference_steps": gen_params["steps"],
                "guidance_scale": gen_params["cfg"],
                "num_images_per_prompt": 1
            }
            
            self.logger.info(f"üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {gen_params['num_frames']} –∫–∞–¥—Ä–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ...")
            
            frames = []
            key_frames = gen_params["key_frames"]
            
            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤
            key_prompts = [
                prompt,
                self._add_dynamic_elements(prompt, 1, key_frames),
                self._add_dynamic_elements(prompt, 2, key_frames),
                self._add_dynamic_elements(prompt, 3, key_frames)
            ]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–∞–¥—Ä—ã
            for i in range(key_frames):
                seed = gen_params["seed"] + i * 50  # –†–∞–∑–Ω—ã–µ seed'—ã
                generator = torch.Generator(device="cuda" if torch.cuda.is_available() else "cpu").manual_seed(seed)
                
                with torch.no_grad():
                    result = pipe(
                        prompt=key_prompts[i],
                        negative_prompt=negative_prompt,
                        generator=generator,
                        **generation_config
                    )
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ pipeline
                frame_img = None
                try:
                    imgs = getattr(result, 'images', None)
                    if imgs:
                        frame_img = imgs[0]
                    elif isinstance(result, (tuple, list)) and len(result) > 0:
                        frame_img = result[0]
                except Exception:
                    frame_img = None

                if frame_img is None:
                    raise RuntimeError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ pipeline')

                frames.append(frame_img)
                self.logger.info(f"  ‚úÖ –ö–ª—é—á–µ–≤–æ–π –∫–∞–¥—Ä {i+1} –≥–æ—Ç–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã –º–µ–∂–¥—É –∫–ª—é—á–µ–≤—ã–º–∏ –∫–∞–¥—Ä–∞–º–∏
            frames_per_segment = gen_params["num_frames"] // (key_frames - 1)
            
            for segment in range(key_frames - 1):
                img1 = np.array(frames[segment])
                img2 = np.array(frames[segment + 1])
                
                for i in range(frames_per_segment):
                    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
                    t = i / frames_per_segment
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—É—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é (ease-in-out)
                    t_smooth = 3 * t * t - 2 * t * t * t
                    
                    # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                    interpolated_array = img1 * (1 - t_smooth) + img2 * t_smooth
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ PIL Image
                    interpolated_image = Image.fromarray(interpolated_array.astype(np.uint8))
                    frames.append(interpolated_image)
                    
                    frame_num = segment * frames_per_segment + i + 1
                    self.logger.info(f"  ‚úÖ –ö–∞–¥—Ä {frame_num}/{gen_params['num_frames']} –≥–æ—Ç–æ–≤ (—Å–µ–≥–º–µ–Ω—Ç {segment+1}, –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è: {t_smooth:.2f})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª—é—á–µ–≤–æ–π –∫–∞–¥—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(frames) < gen_params["num_frames"]:
                frames.append(frames[-1])
                self.logger.info(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä")
            
            frames = frames[:gen_params["num_frames"]]  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            output_dir = os.path.join(os.path.dirname(__file__), "Videos", "generated")
            os.makedirs(output_dir, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä—ã
            self.logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∫–∞–¥—Ä—ã...")
            for i, frame in enumerate(frames):
                frame_path = os.path.join(output_dir, f"video_frame_{i:03d}.png")
                try:
                    if hasattr(frame, 'save'):
                        try:
                            from typing import cast
                            frame = cast(Image.Image, frame)
                        except Exception:
                            pass
                        frame.save(frame_path)
                    else:
                        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤–µ—Å—Ç–∏ numpy array / tensor –∫ PIL Image
                        import numpy as _np
                        try:
                            import torch as _torch
                        except Exception:
                            _torch = None

                        if _torch and _torch.is_tensor(frame):
                            arr = frame.detach().cpu().numpy()
                            Image.fromarray(arr.astype('uint8')).save(frame_path)
                        elif isinstance(frame, _np.ndarray):
                            Image.fromarray(frame.astype('uint8')).save(frame_path)
                        else:
                            Image.fromarray(_np.array(frame).astype('uint8')).save(frame_path)

                    self.logger.info(f"  üíæ –ö–∞–¥—Ä {i+1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {frame_path}")
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–¥—Ä {i+1}: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ
            video_path = os.path.join(output_dir, f"ConsoleVideo_{gen_params['seed']}.mp4")
            self.logger.info(f"üé¨ –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ: {video_path}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ numpy –º–∞—Å—Å–∏–≤—ã
            video_frames = []
            for frame in frames:
                frame_array = np.array(frame)
                video_frames.append(frame_array)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            imageio.mimsave(video_path, video_frames, fps=gen_params["fps"], quality=8)
            
            self.logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {video_path}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            try:
                subprocess.run(["start", video_path], shell=True, check=True)
                self.logger.info("üé¨ –í–∏–¥–µ–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç–æ")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {e}")
            
            return video_path
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
            import traceback
            traceback.print_exc()
            return None
        finally:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            response_time = time.time() - start_time
            self.add_performance_metric("video_generation", response_time)
            self.logger.info(f"üé¨ –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {response_time:.2f} —Å–µ–∫")

    def _add_dynamic_elements(self, prompt, frame_index, total_frames):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫ –ø—Ä–æ–º–ø—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞–¥—Ä–∞"""
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
        dynamic_elements = {
            "pose": [
                "slight head turn", "head turning", "looking to the side", "looking up", "looking down",
                "slight body movement", "body turning", "arm movement", "hand gesture", "finger movement",
                "eye movement", "blinking", "mouth movement", "smile change", "expression change"
            ],
            "lighting": [
                "slight lighting change", "light shift", "shadow movement", "highlight change",
                "ambient light variation", "light intensity change", "color temperature shift"
            ],
            "camera": [
                "slight camera movement", "camera angle change", "zoom effect", "perspective shift",
                "depth change", "focus adjustment", "blur variation"
            ],
            "motion": [
                "motion blur", "movement lines", "wind effect", "hair movement", "clothing movement",
                "particle effects", "energy flow", "magical effects", "sparkle effects"
            ]
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞
        prompt_lower = prompt.lower()
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if any(word in prompt_lower for word in ["anime", "girl", "boy", "character", "person"]):
            # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏—è –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            elements = dynamic_elements["pose"] + dynamic_elements["motion"]
        elif any(word in prompt_lower for word in ["landscape", "nature", "scenery", "background"]):
            # –î–ª—è –ø–µ–π–∑–∞–∂–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ –∫–∞–º–µ—Ä—ã
            elements = dynamic_elements["lighting"] + dynamic_elements["camera"]
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            elements = dynamic_elements["pose"] + dynamic_elements["lighting"] + dynamic_elements["camera"] + dynamic_elements["motion"]
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞–¥—Ä–∞
        if elements:
            # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∫–∞–¥—Ä–∞–º
            element_index = int((frame_index / total_frames) * len(elements))
            selected_element = elements[element_index % len(elements)]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫ –ø—Ä–æ–º–ø—Ç—É
            enhanced_prompt = f"{prompt}, {selected_element}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress = frame_index / total_frames
            if progress > 0.5:
                enhanced_prompt += ", subtle animation"
            
            return enhanced_prompt
        
        return prompt
    
    def _install_diffusers_dependencies(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è diffusers"""
        try:
            import diffusers
            import torch
            self.logger.info("‚úÖ diffusers –∏ torch —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return
        except ImportError:
            self.logger.info("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è diffusers...")
            
            try:
                subprocess.run([_sys.executable, "-m", "pip", "install", "diffusers", "transformers", "torch", "torchvision", "accelerate", "safetensors"], 
                             check=True, capture_output=True)
                self.logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            except subprocess.CalledProcessError as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
                raise

    def show_image_base64_temp(self, b64img: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ base64 –Ω–∞ 5 —Å–µ–∫—É–Ω–¥"""
        try:
            # –í –≤–µ–±-—Ä–µ–∂–∏–º–µ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –ø–æ–∫–∞–∑–∞
            if not getattr(self, 'show_images_locally', True):
                return
            img = Image.open(BytesIO(base64.b64decode(b64img)))
            img.show()
            time.sleep(5)
            img.close()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    def find_new_audio(self) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        audio_extensions = ['.mp3', '.wav', '.m4a', '.flac', '.ogg', '.aac']
        
        # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ Audio
        audio_dir = os.path.join(self.base_dir, 'Audio')
        if os.path.exists(audio_dir):
            for file in os.listdir(audio_dir):
                if any(file.lower().endswith(ext) for ext in audio_extensions):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                    if '.used' not in file and not file.endswith('.used'):
                        file_path = os.path.join(audio_dir, file)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                        if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                            return file_path
        
        return ""

    def mark_audio_used(self, audio_path: str):
        """–£–¥–∞–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            if os.path.exists(audio_path):
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é
                os.remove(audio_path)
                self.logger.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {os.path.basename(audio_path)}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")

    def transcribe_audio_whisper(self, audio_path: str, lang: str = "ru", use_separator: bool = True) -> Optional[str]:
        """
        –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ whisper-cli. –ï—Å–ª–∏ use_separator=True, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ—Ç –≤–æ–∫–∞–ª —á–µ—Ä–µ–∑ audio-separator.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (–≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏).
        """
        start_time = time.time()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º audio –º–æ–¥–µ–ª—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not getattr(self, 'use_audio', False):
            self.logger.info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞—é audio –º–æ–¥–µ–ª—å")
            self.use_audio = True
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            self.auto_disable_tools("audio")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º whisper –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.check_whisper_setup():
            return "[Whisper error] –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π Whisper. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ whisper-cli.exe –∏ –º–æ–¥–µ–ª–∏."
        
        try:
            base_dir = os.path.dirname(os.path.abspath(__file__))
            exe_path = os.path.join(base_dir, "Release", "whisper-cli.exe")
            model_path = os.path.join(base_dir, "models", "whisper-large-v3-q8_0.gguf")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ whisper-cli.exe
            if not os.path.exists(exe_path):
                return "[Whisper error] –ù–µ –Ω–∞–π–¥–µ–Ω whisper-cli.exe –≤ –ø–∞–ø–∫–µ Release"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            if not os.path.exists(model_path):
                return "[Whisper error] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å whisper –≤ –ø–∞–ø–∫–µ models"
            
            audio_for_whisper = audio_path
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º audio separator –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if use_separator:
                try:
                    from audio_separator.separator import Separator
                    self.logger.info("üéµ –ò—Å–ø–æ–ª—å–∑—É—é audio-separator –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤–æ–∫–∞–ª–∞...")
                    out_dir = os.path.join(base_dir, "separated")
                    os.makedirs(out_dir, exist_ok=True)
                    separator = Separator(output_dir=out_dir)
                    separator.load_model(model_filename='htdemucs_ft.yaml')
                    output_files = separator.separate(audio_path)
                    vocals_path = None
                    for file_path in output_files:
                        if '(Vocals)' in os.path.basename(file_path):
                            vocals_path = file_path  # audio-separator –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
                            self.logger.info(f"[SUCCESS] –í–æ–∫–∞–ª –Ω–∞–π–¥–µ–Ω: {vocals_path}")
                            break
                    if not vocals_path:
                        self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Å –≥–æ–ª–æ—Å–æ–º –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–æ—Ä–æ–∂–µ–∫, –∏—Å–ø–æ–ª—å–∑—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª")
                    else:
                        audio_for_whisper = vocals_path
                except ImportError:
                    self.logger.warning("‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ audio-separator. –ü—ã—Ç–∞—é—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
                    try:
                        import subprocess
                        subprocess.run([_sys.executable, "-m", "pip", "install", "audio-separator"], 
                                     capture_output=True, check=True)
                        self.logger.info("‚úÖ audio-separator —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                        from audio_separator.separator import Separator
                        self.logger.info("üéµ –ò—Å–ø–æ–ª—å–∑—É—é audio-separator –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤–æ–∫–∞–ª–∞...")
                        out_dir = os.path.join(base_dir, "separated")
                        os.makedirs(out_dir, exist_ok=True)
                        separator = Separator(output_dir=out_dir)
                        separator.load_model(model_filename='htdemucs_ft.yaml')
                        output_files = separator.separate(audio_path)
                        vocals_path = None
                        for file_path in output_files:
                            if '(Vocals)' in os.path.basename(file_path):
                                vocals_path = file_path  # audio-separator –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
                                self.logger.info(f"[SUCCESS] –í–æ–∫–∞–ª –Ω–∞–π–¥–µ–Ω: {vocals_path}")
                                break
                        if not vocals_path:
                            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Å –≥–æ–ª–æ—Å–æ–º –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–æ—Ä–æ–∂–µ–∫, –∏—Å–ø–æ–ª—å–∑—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª")
                        else:
                            audio_for_whisper = vocals_path
                    except Exception as install_error:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å audio-separator: {install_error}")
                        self.logger.info("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–æ—Ä–æ–∂–µ–∫")
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ audio-separator: {e}, –∏—Å–ø–æ–ª—å–∑—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Whisper (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —É–∂–µ WAV)
            if not audio_for_whisper.lower().endswith('.wav'):
                wav_path = self.convert_audio_to_wav(audio_for_whisper)
                if wav_path:
                    audio_for_whisper = wav_path
                    self.logger.info(f"‚úÖ –ê—É–¥–∏–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ WAV: {os.path.basename(wav_path)}")
                else:
                    self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WAV, –∏—Å–ø–æ–ª—å–∑—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª")
            else:
                self.logger.info("‚úÖ –ê—É–¥–∏–æ —É–∂–µ –≤ WAV —Ñ–æ—Ä–º–∞—Ç–µ")
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ñ–∞–π–ª –≤ .used.—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            base_used, ext_used = os.path.splitext(audio_for_whisper)
            used_path = base_used + ".used" + ext_used
            try:
                if os.path.exists(audio_for_whisper):
                    os.rename(audio_for_whisper, used_path)
                    self.logger.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: {os.path.basename(used_path)}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {audio_for_whisper}")
                    used_path = audio_for_whisper
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –ø–æ—Å–ª–µ whisper: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                used_path = audio_for_whisper
            
            # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º used_path –¥–ª—è whisper
            cmd = [exe_path, "--model", model_path]
            if lang:
                cmd += ["--language", lang]
            cmd.append(used_path)
            self.logger.info(f"[INFO] –ó–∞–ø—É—Å–∫ Whisper: {' '.join(cmd)}")
            import subprocess
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300, encoding="utf-8", errors="replace")
            transcript = result.stdout.strip() if result.stdout else ""
            if transcript:
                self.logger.info("\n=== –¢–†–ê–ù–°–ö–†–ò–ü–¢ –ê–£–î–ò–û ===\n" + transcript)
                return transcript
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –±—ã–ª separator
            if use_separator and 'separated' in audio_for_whisper:
                try:
                    separated_dir = os.path.dirname(audio_for_whisper)
                    if os.path.exists(separated_dir):
                        shutil.rmtree(separated_dir)
                        self.logger.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã audio-separator –æ—á–∏—â–µ–Ω—ã")
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
            
            err = result.stderr.strip() if result.stderr else ""
            return f"[Whisper error] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç. STDERR: {err}"
        except Exception as e:
            error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ whisper-cli: {str(e)}"
            self.logger.error(error_msg)
            return f"[Whisper error] {error_msg}"
        finally:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            response_time = time.time() - start_time
            self.add_performance_metric("whisper_transcription", response_time)
            self.logger.info(f"üé§ Whisper –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞ {response_time:.2f} —Å–µ–∫")

    def convert_audio_to_wav(self, audio_path: str) -> Optional[str]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ WAV —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Whisper.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ WAV —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
        """
        try:
            if not audio_path or not os.path.exists(audio_path):
                return None
            
            # –ï—Å–ª–∏ —É–∂–µ WAV, –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            if audio_path.lower().endswith('.wav'):
                return audio_path
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
            try:
                subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
            except (subprocess.CalledProcessError, FileNotFoundError):
                self.logger.warning("‚ö†Ô∏è ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            temp_dir = os.path.join(os.path.dirname(audio_path), "temp_convert")
            os.makedirs(temp_dir, exist_ok=True)
            
            # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ WAV —Ñ–∞–π–ª–∞
            base_name = os.path.splitext(os.path.basename(audio_path))[0]
            wav_path = os.path.join(temp_dir, f"{base_name}.wav")
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ffmpeg
            cmd = [
                'ffmpeg', '-i', audio_path,
                '-acodec', 'pcm_s16le',  # 16-bit PCM
                '-ar', '16000',          # 16kHz sample rate (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è Whisper)
                '-ac', '1',              # –º–æ–Ω–æ
                '-y',                    # –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
                wav_path
            ]
            
            self.logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∞—É–¥–∏–æ –≤ WAV: {' '.join(cmd)}")
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0 and os.path.exists(wav_path):
                self.logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {os.path.basename(wav_path)}")
                return wav_path
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {result.stderr}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤ WAV: {e}")
            return None

    def check_whisper_setup(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É Whisper: –Ω–∞–ª–∏—á–∏–µ whisper-cli.exe –∏ –º–æ–¥–µ–ª–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ, False –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.
        """
        try:
            base_dir = os.path.dirname(os.path.abspath(__file__))
            exe_path = os.path.join(base_dir, "Release", "whisper-cli.exe")
            model_path = os.path.join(base_dir, "models", "whisper-large-v3-q8_0.gguf")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º whisper-cli.exe
            if not os.path.exists(exe_path):
                self.logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω whisper-cli.exe –≤ –ø–∞–ø–∫–µ Release: {exe_path}")
                self.logger.info("üí° –°–∫–∞—á–∞–π—Ç–µ whisper.cpp —Å https://github.com/ggerganov/whisper.cpp")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
            if not os.path.exists(model_path):
                self.logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å whisper –≤ –ø–∞–ø–∫–µ models: {model_path}")
                self.logger.info("üîÑ –ü—ã—Ç–∞—é—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å...")
                if self.download_whisper_model():
                    self.logger.info("‚úÖ –ú–æ–¥–µ–ª—å whisper —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                else:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å whisper")
                    self.logger.info("üí° –°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å whisper-large-v3-q8_0.gguf –≤—Ä—É—á–Ω—É—é")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            try:
                result = subprocess.run([exe_path, "--help"], capture_output=True, text=True, timeout=10)
                if result.returncode != 0:
                    self.logger.warning("‚ö†Ô∏è whisper-cli.exe –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω")
                    return False
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ whisper-cli.exe: {e}")
                return False
            
            self.logger.info("‚úÖ Whisper –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Whisper: {e}")
            return False

    def download_whisper_model(self) -> bool:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å whisper-large-v3-q8_0.gguf.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞.
        """
        try:
            base_dir = os.path.dirname(os.path.abspath(__file__))
            models_dir = os.path.join(base_dir, "models")
            os.makedirs(models_dir, exist_ok=True)
            
            model_name = "whisper-large-v3-q8_0.gguf"
            model_path = os.path.join(models_dir, model_name)
            
            # URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Hugging Face)
            model_url = "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-large-v3-q8_0.bin"
            
            self.logger.info(f"üì• –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å whisper: {model_name}")
            self.logger.info(f"üîó URL: {model_url}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
            response = requests.get(model_url, stream=True, timeout=300)
            response.raise_for_status()
            
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            
            with open(model_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        if total_size > 0:
                            percent = (downloaded / total_size) * 100
                            self.logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent:.1f}% ({downloaded}/{total_size} –±–∞–π—Ç)")
            
            self.logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–∫–∞—á–∞–Ω–∞: {model_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ whisper: {e}")
            return False

    def download_youtube_audio(self, url: str, out_dir: Optional[str] = None) -> str:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É —Å YouTube –ø–æ —Å—Å—ã–ª–∫–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç yt-dlp)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        """
        # subprocess —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
        if out_dir is None:
            out_dir = os.path.join(os.path.dirname(__file__), "Audio")
        os.makedirs(out_dir, exist_ok=True)
        out_path = os.path.join(out_dir, "yt_audio.%(ext)s")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies
        cookies_path = self.get_youtube_cookies_path()
        use_cookies = False
        
        if cookies_path and self.check_cookies_validity(cookies_path):
            use_cookies = True
            self.logger.info("üç™ –ò—Å–ø–æ–ª—å–∑—É—é cookies –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ YouTube")
        else:
            self.logger.info("‚ÑπÔ∏è Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è yt-dlp
        base_cmd = [
            "yt-dlp",
            "--force-ipv4",
            "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "--extractor-args", "youtube:player_client=android",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Android –∫–ª–∏–µ–Ω—Ç
            "--no-check-certificate",  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL –æ—à–∏–±–∫–∏
            "--prefer-insecure",  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º HTTP
            "--geo-bypass",  # –û–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            "--geo-bypass-country", "US",  # –°—Ç—Ä–∞–Ω–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞
            "-f", "bestaudio[ext=m4a]/bestaudio/best",
            "--extract-audio", "--audio-format", "wav",  # –°—Ä–∞–∑—É –≤ WAV –¥–ª—è Whisper
            "-o", out_path
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if use_cookies:
            base_cmd.extend(["--cookies", str(cookies_path)])  # type: ignore[arg-type]
        
        # –î–æ–±–∞–≤–ª—è–µ–º URL –≤ –∫–æ–Ω–µ—Ü
        cmd = base_cmd + [url]
        
        try:
            self.logger.info(f"–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ —Å YouTube: {url}")
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–∏—è
            cmd_str = " ".join(cmd)
            self.logger.info(f"–ö–æ–º–∞–Ω–¥–∞: {cmd_str}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=300)
            
            if result.stdout:
                self.logger.info(f"yt-dlp stdout: {result.stdout}")
            if result.stderr:
                self.logger.warning(f"yt-dlp stderr: {result.stderr}")
            
            # –ù–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            for fname in os.listdir(out_dir):
                if fname.startswith("yt_audio") and fname.endswith(('.wav', '.m4a', '.mp3', '.ogg', '.flac')):
                    self.logger.info(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {fname}")
                    return os.path.join(out_dir, fname)
            
            self.logger.warning("‚ö†Ô∏è –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return ""
            
        except subprocess.TimeoutExpired:
            self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ (5 –º–∏–Ω—É—Ç)")
            return ""
        except subprocess.CalledProcessError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ yt-dlp: {e}")
            if e.stderr:
                self.logger.error(f"stderr: {e.stderr}")
            return ""
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self.logger.info("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
            try:
                alt_cmd = [
                    "yt-dlp",
                    "--force-ipv4",
                    "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                    "--extractor-args", "youtube:player_client=web",
                    "--no-check-certificate",
                    "--geo-bypass",
                    "--geo-bypass-country", "US",
                    "-f", "bestaudio",
                    "--extract-audio", "--audio-format", "wav",  # –°—Ä–∞–∑—É –≤ WAV –¥–ª—è Whisper
                    "-o", out_path
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                if use_cookies:
                    alt_cmd.extend(["--cookies", str(cookies_path)])  # type: ignore[arg-type]

                alt_cmd.append(url)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                alt_cmd_str = " ".join(alt_cmd)
                self.logger.info(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {alt_cmd_str}")
                result = subprocess.run(alt_cmd, check=True, capture_output=True, text=True, timeout=300)
                
                # –ù–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                for fname in os.listdir(out_dir):
                    if fname.startswith("yt_audio") and fname.endswith(('.wav', '.m4a', '.mp3', '.ogg', '.flac')):
                        self.logger.info(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: {fname}")
                        return os.path.join(out_dir, fname)
                        
            except Exception as alt_e:
                self.logger.error(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {alt_e}")
                
                # –ü—Ä–æ–±—É–µ–º —Ç—Ä–µ—Ç–∏–π –º–µ—Ç–æ–¥ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                self.logger.info("üîÑ –ü—Ä–æ–±—É—é —Ç—Ä–µ—Ç–∏–π –º–µ—Ç–æ–¥ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)...")
                try:
                    simple_cmd = [
                        "yt-dlp",
                        "--force-ipv4",
                        "--user-agent", "Mozilla/0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                        "--no-check-certificate",
                        "-f", "bestaudio",
                        "--extract-audio", "--audio-format", "mp3",
                        "-o", out_path
                    ]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                    if use_cookies:
                        simple_cmd.extend(["--cookies", str(cookies_path)])  # type: ignore[arg-type]
                    
                    simple_cmd.append(url)
                    
                    self.logger.info(f"–¢—Ä–µ—Ç–∏–π –º–µ—Ç–æ–¥: {' '.join(simple_cmd)}")
                    result = subprocess.run(simple_cmd, check=True, capture_output=True, text=True, timeout=300)
                    
                    # –ù–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                    for fname in os.listdir(out_dir):
                        if fname.startswith("yt_audio") and fname.endswith(('.m4a', '.mp3', '.wav', '.ogg', '.flac')):
                            self.logger.info(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ —Ç—Ä–µ—Ç—å–∏–º –º–µ—Ç–æ–¥–æ–º: {fname}")
                            return os.path.join(out_dir, fname)
                            
                except Exception as simple_e:
                    self.logger.error(f"‚ùå –¢—Ä–µ—Ç–∏–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {simple_e}")
            
            return ""
    def find_new_image(self) -> str:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (png –∏–ª–∏ jpg) –≤ –ø–∞–ø–∫–µ Photos, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ñ–∞–π–ª—ã —Å .used –ø–µ—Ä–µ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        """
        photos_dir = os.path.join(os.path.dirname(__file__), "Photos")
        if not os.path.exists(photos_dir):
            return ""
        for fname in os.listdir(photos_dir):
            lower = fname.lower()
            if lower.endswith(('.png', '.jpg', '.jpeg')) and '.used' not in os.path.splitext(lower)[0]:
                return os.path.join(photos_dir, fname)
        return ""

    def mark_image_used(self, image_path: str):
        """
        –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ–π—Ä–æ—Å–µ—Ç—å –µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞
        """
        if not image_path:
            return
        base, ext = os.path.splitext(image_path)
        new_path = base + ".used" + ext
        try:
            os.rename(image_path, new_path)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    def extract_think_content(self, text: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –±–ª–æ–∫–∞ <think> –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
        - <think>...</think> 
        - <|begin_of_thought|>...<|end_of_thought|>
        - BEGIN_OF_THOUGHT...END_OF_THOUGHT

        Args:
            text: –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π

        Returns:
            Optional[str]: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏–ª–∏ None –µ—Å–ª–∏ –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (case-insensitive)
        patterns = [
            r'<think>(.*?)</think>',
            r'<\|begin_of_thought\|>(.*?)<\|end_of_thought\|>',
            r'BEGIN_OF_THOUGHT(.*?)END_OF_THOUGHT'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)
            if match:
                content = match.group(1).strip()
                if content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                    return content
        
        return None

    def extract_first_json(self, text: str, allow_json_in_think: bool = False) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-–±–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            text: –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON
            allow_json_in_think: –ò—Å–∫–∞—Ç—å –ª–∏ JSON –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ think
            
        Returns:
            str: –ù–∞–π–¥–µ–Ω–Ω—ã–π JSON –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º think-–±–ª–æ–∫ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        think_content = None
        clean_text = text
        
        patterns = [
            r'<think>.*?</think>',
            r'<\|begin_of_thought\|>.*?<\|end_of_thought\|>',
            r'BEGIN_OF_THOUGHT.*?END_OF_THOUGHT'
        ]
        
        for pattern in patterns:
            think_match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)
            if think_match:
                think_content = self.extract_think_content(think_match.group(0))
                clean_text = re.sub(pattern, '', text, flags=re.DOTALL | re.IGNORECASE).strip()
                break
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–∏—Å—Ç—ã–π JSON (–±–µ–∑ –æ–±—Ä–∞–º–ª–µ–Ω–∏–π)
        json_in_text = self._extract_json_from_text(clean_text)
        if json_in_text:
            return json_in_text
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å JSON —Å –æ–±—Ä–∞–º–ª–µ–Ω–∏–µ–º –∏ —É–¥–∞–ª—è—Ç—å –µ–≥–æ
        json_with_wrapper = re.search(r'```(?:json)?\s*(.*?)\s*```', clean_text, re.DOTALL)
        if json_with_wrapper:
            potential_json = json_with_wrapper.group(1).strip()
            json_in_wrapper = self._extract_json_from_text(potential_json)
            if json_in_wrapper:
                return json_in_wrapper
            
        # –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏ –µ—Å—Ç—å think-–∫–æ–Ω—Ç–µ–Ω—Ç - –∏—â–µ–º JSON —Ç–∞–º
        if allow_json_in_think and think_content:
            json_in_think = self._extract_json_from_text(think_content)
            if json_in_think:
                return json_in_think
        
        return text  # –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ
    
    def _extract_json_from_text(self, text: str) -> str:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
        """
        # re —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
        stack = []
        start = None
        
        for i, c in enumerate(text):
            if c == '{':
                if not stack:
                    start = i
                stack.append('{')
            elif c == '}':
                if stack:
                    stack.pop()
                    if not stack and start is not None:
                        return text[start:i+1]
        
        return ""

    def _smart_json_parse(self, s: str):
        """–£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä JSON —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple (data_or_none, fixes_list).
        """
        logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ JSON: {s[:200]}...")
        try:
            return json.loads(s), []
        except Exception as e:
            fixes = [f"–ü–µ—Ä–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: {e}"]

        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —Å–∫–æ–±–∫–∏
        open_braces = s.count('{')
        close_braces = s.count('}')
        if open_braces > close_braces:
            s2 = s + '}' * (open_braces - close_braces)
            fixes.append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {open_braces - close_braces} }} –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ–±–æ–∫")
            try:
                return json.loads(s2), fixes
            except Exception:
                pass
        elif close_braces > open_braces:
            s2 = re.sub(r'}+$', '', s)
            fixes.append(f"–£–¥–∞–ª–µ–Ω—ã –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏")
            try:
                return json.loads(s2), fixes
            except Exception:
                pass

        # –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ –µ—Å–ª–∏ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        if "'" in s and '"' not in s:
            s2 = s.replace("'", '"')
            try:
                return json.loads(s2), fixes+['–ó–∞–º–µ–Ω–µ–Ω—ã –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ']
            except Exception:
                pass

        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
        s3 = re.sub(r',\s*([}\]])', r'\1', s)
        try:
            return json.loads(s3), fixes+['–£–¥–∞–ª–µ–Ω—ã –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ']
        except Exception:
            pass

        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–ª—é—á–∏ –≤ –∫–∞–≤—ã—á–∫–∏ (–≥—Ä—É–±–∞—è –ø–æ–ø—ã—Ç–∫–∞)
        s4 = re.sub(r'([,{]\s*)([a-zA-Z0-9_]+)\s*:', r'\1"\2":', s3)
        try:
            return json.loads(s4), fixes+['–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–≤—ã—á–∫–∏ –∫ –∫–ª—é—á–∞–º']
        except Exception:
            pass

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        s5 = re.sub(r'([^\"])\s*$', r'\1"', s4)
        try:
            return json.loads(s5), fixes+['–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏']
        except Exception:
            pass

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –æ—Ç –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        s6 = re.sub(r'[^\x20-\x7E]', '', s5)
        try:
            return json.loads(s6), fixes+['–û—á–∏—â–µ–Ω—ã –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã']
        except Exception as e2:
            fixes.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e2}")

        return None, fixes
    def __init__(self, lm_studio_url: str = "http://localhost:1234", 
                 google_api_key: str = "", google_cse_id: str = ""):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            lm_studio_url: URL —Å–µ—Ä–≤–µ—Ä–∞ LM Studio
            google_api_key: API –∫–ª—é—á Google Custom Search
            google_cse_id: ID –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã Google CSE
        """
        self.lm_studio_url = lm_studio_url.rstrip("/")
        self.google_api_key = google_api_key
        self.google_cse_id = google_cse_id
        # unify logger usage for instance methods
        self.logger = logger
        self.conversation_history: List[Dict[str, Any]] = []
        self.brain_model = "J:/models-LM Studio/mradermacher/Huihui-Qwen3-4B-Thinking-2507-abliterated-GGUF/Huihui-Qwen3-4B-Thinking-2507-abliterated.Q4_K_S.gguf"
        self.brain_model_id = None  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –º–æ–¥–µ–ª–∏ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
        self.use_separator = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ Pylance
        self.use_image_generation = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        # –¢—É–º–±–ª–µ—Ä—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (–≤–∏–∑—É–∞–ª –∏ –∞—É–¥–∏–æ)
        self.use_vision = False
        self.use_audio = False
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–º –ø–æ–∫–∞–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–ª—è –≤–µ–±-—Ä–µ–∂–∏–º–∞ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å)
        self.show_images_locally = True
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (base64) –∏ –æ—Ç–≤–µ—Ç–∞
        self.last_generated_image_b64 = None
        self.last_final_response = ""
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        self.max_context_length = 262144  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≤—Ä–µ–º–µ–Ω–Ω–æ)
        self.safe_context_length = 32768   # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≤—Ä–µ–º–µ–Ω–Ω–æ)
        self.current_context_length = 0    # –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_metrics = []  # –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
        self.retry_count = 0
        self.max_retries = 3
        
        # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≥–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å
        self.continuous_recording = False
        self.audio_queue = queue.Queue()
        self.recording_thread = None
        
        # –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.tool_timers = {}
        self.auto_disable_delay = 300  # –í—ã–∫–ª—é—á–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ–ª—å –º–æ–∑–≥–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._auto_load_brain_model()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        self._initialize_dynamic_context()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        self.base_dir = os.path.dirname(os.path.abspath(__file__))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ChromaDB –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        self.chromadb_manager = ChromaDBManager(
            db_path=os.path.join(self.base_dir, "chroma_db"),
            use_gpu=True  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É GPU
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ
        self._check_ffmpeg()
        
        # Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.telegram_bot_token = ""
        self.telegram_allowed_user_id = ""
        

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.system_prompt = """
–í–´ - –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–°–°–ò–°–¢–ï–ù–¢ –° –î–û–°–¢–£–ü–û–ú –ö –í–ï–ö–¢–û–†–ù–û–ô –ü–ê–ú–Ø–¢–ò (ChromaDB):

–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ChromaDB, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç:
1. –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∏–∞–ª–æ–≥–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
2. –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
3. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤

–í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´ –° –ü–ê–ú–Ø–¢–¨–Æ:
- –í–°–ï –¥–∏–∞–ª–æ–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
- –í—ã –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–∞–º—è—Ç—å –Ω–∞–ø—Ä—è–º—É—é –≤ –Ω–æ–≤—ã—Ö —á–∞—Ç–∞—Ö - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —á–µ–º-—Ç–æ, —á—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–æ—Å—å —Ä–∞–Ω–µ–µ, –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å —ç—Ç–æ –∏–∑ –ø–∞–º—è—Ç–∏
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–º–æ–≥–∞—é—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã
- –ü–∞–º—è—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ —è–≤–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–µ–π

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∫–∞–∂–¥—ã–π —Ç–µ–≥ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–º–µ—á–µ–Ω—ã [!]):

[–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ] ‚Äî –±–∞–∑–æ–≤—ã–µ —Ç–µ–≥–∏, –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω—ã –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞:
- masterpiece [!] ‚Äî –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
- best quality [!] ‚Äî –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
- extremely detailed [!] ‚Äî –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
- high quality [!] ‚Äî –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
- 4k / 8k / 16k resolution ‚Äî –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- dynamic pose ‚Äî –¥–∏–Ω–∞–º–∏—á–Ω–∞—è –ø–æ–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- random pose ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- various pose ‚Äî —Ä–∞–∑–Ω—ã–µ –ø–æ–∑—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- random composition ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- random clothes ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –æ–¥–µ–∂–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- no specific character ‚Äî –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- solo ‚Äî –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- multiple characters / group ‚Äî –≥—Ä—É–ø–ø–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- close-up ‚Äî –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- full body ‚Äî –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- upper body ‚Äî –ø–æ –ø–æ—è—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- cropped to knees / cropped tight / half body ‚Äî –æ–±—Ä–µ–∑–∫–∞ –∫–∞–¥—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- view from below / bird's eye view / side view / front view / back view ‚Äî —Ä–∞–∫—É—Ä—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- floating / levitating ‚Äî –ø–∞—Ä—è—â–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- random background / abstract background / surreal background ‚Äî —Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- soft lighting / dramatic lighting / natural lighting ‚Äî –æ—Å–≤–µ—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- cinematic lighting ‚Äî –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- beautifully lit ‚Äî –∫—Ä–∞—Å–∏–≤–æ –æ—Å–≤–µ—â–µ–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- natural colors / vibrant colors / muted colors ‚Äî —Ü–≤–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- atmospheric ‚Äî –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- detailed background ‚Äî –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- intricately detailed ‚Äî —Å–ª–æ–∂–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- ornate ‚Äî —É–∫—Ä–∞—à–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- simple background ‚Äî –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- medium breasts / small breasts / large breasts ‚Äî —Ä–∞–∑–º–µ—Ä –≥—Ä—É–¥–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- wide hips / slim hips / athletic build / petite ‚Äî —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- cute face / beautiful eyes / expressive eyes / smile / neutral expression / serious expression ‚Äî –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

[NSFW] ‚Äî –¥–ª—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è:
- nude ‚Äî –æ–±–Ω–∞–∂—ë–Ω–Ω–∞—è –Ω–∞—Ç—É—Ä–∞
- lewd ‚Äî –ø–æ—à–ª–æ—Å—Ç—å
- explicit ‚Äî –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å
- uncensored ‚Äî –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã
- cleavage ‚Äî –¥–µ–∫–æ–ª—å—Ç–µ
- nipples visible ‚Äî –≤–∏–¥–Ω—ã —Å–æ—Å–∫–∏
- medium breasts / large breasts / small breasts ‚Äî —Ä–∞–∑–º–µ—Ä –≥—Ä—É–¥–∏
- wide hips ‚Äî —à–∏—Ä–æ–∫–∏–µ –±—ë–¥—Ä–∞
- ass visible ‚Äî –≤–∏–¥–Ω–∞ –ø–æ–ø–∞
- sexy pose ‚Äî —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è –ø–æ–∑–∞
- dynamic pose / random pose ‚Äî –¥–∏–Ω–∞–º–∏–∫–∞
- legs cropped to knees ‚Äî –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –Ω–æ–≥–∞—Ö
- solo ‚Äî –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂
- 1girl / 1boy / 1person ‚Äî –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –±–µ–∑ –∏–º–µ–Ω–∏
- multiple girls / multiple boys ‚Äî –≥—Ä—É–ø–ø–∞
- erotic / sensual / seductive pose ‚Äî —ç—Ä–æ—Ç–∏–∫–∞
- bed scene / erotic setting / dim lighting ‚Äî –ø–æ—Å—Ç–µ–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞
- soft skin / smooth skin ‚Äî –º—è–≥–∫–∞—è –∫–æ–∂–∞
- skin exposed ‚Äî –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–æ–∂–∞
- no clothes / minimal clothes / random clothes ‚Äî –æ–¥–µ–∂–¥–∞
- random background ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–æ–Ω
- random hair color / natural hair color ‚Äî —Ü–≤–µ—Ç –≤–æ–ª–æ—Å
- messy hair / flowing hair ‚Äî —Ä–∞—Å—Ç—Ä—ë–ø–∞–Ω–Ω—ã–µ –≤–æ–ª–æ—Å—ã
- natural lighting / moody lighting / warm lighting ‚Äî –æ—Å–≤–µ—â–µ–Ω–∏–µ

[NSFW - negative prompt] ‚Äî –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–∞–≥–æ–≤:
- worst quality [!]
- low quality [!]
- blurry [!]
- jpeg artifacts [!]
- watermark [!]
- signature [!]
- disfigured [!]
- malformed limbs [!]
- bad anatomy [!]
- poorly drawn face [!]
- extra limbs [!]
- missing limbs [!]
- out of frame [!]
- mutilated [!]
- mutated hands [!]
- extra fingers [!]
- text [!]
- error [!]
- cropped [!]
- duplicate [!]
- lowres [!]
- bad proportions [!]
- squint [!]
- grainy [!]
- ugly [!]

[SFW] ‚Äî –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å—Ü–µ–Ω, –±–µ–∑ NSFW:
- sfw [!]
- clothed ‚Äî –æ–¥–µ—Ç(–∞)
- random clothes ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –æ–¥–µ–∂–¥–∞
- casual clothes / elegant clothes / formal clothes ‚Äî —Å—Ç–∏–ª—å –æ–¥–µ–∂–¥—ã
- dynamic pose / random pose ‚Äî –¥–∏–Ω–∞–º–∏–∫–∞
- walking / sitting / standing / running / jumping ‚Äî –ø–æ–∑–∞/–¥–≤–∏–∂–µ–Ω–∏–µ
- smiling / happy expression / neutral expression ‚Äî –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞
- cute face / beautiful eyes / expressive eyes ‚Äî –ª–∏—Ü–æ
- solo / group ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
- wide shot / medium shot / close-up ‚Äî –ø–ª–∞–Ω
- background: natural / city / forest / abstract / random background ‚Äî —Ñ–æ–Ω
- bright lighting / natural lighting / studio lighting ‚Äî –æ—Å–≤–µ—â–µ–Ω–∏–µ
- scenic view ‚Äî –ø–µ–π–∑–∞–∂
- colorful / vibrant colors / pastel colors ‚Äî —Ü–≤–µ—Ç–∞
- hair color random / natural hair colors / random hairstyle ‚Äî –≤–æ–ª–æ—Å—ã
- standing on grass / street / indoors / outdoors ‚Äî –æ–∫—Ä—É–∂–µ–Ω–∏–µ
- hands visible / face visible ‚Äî –≤–∏–¥–∏–º–æ—Å—Ç—å —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞
- wearing hat / scarf / jacket / dress ‚Äî –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
- full body / half body / cropped ‚Äî –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ

[SFW - negative prompt] ‚Äî –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ NSFW:
- nude [!]
- nsfw [!]
- lewd [!]
- explicit [!]
- uncleared skin [!]
- cleavage [!]
- nipples [!]
- bad anatomy [!]
- malformed [!]
- low quality [!]
- jpeg artifacts [!]
- watermark [!]
- signature [!]
- text [!]
- blurry [!]
- distorted [!]
- out of frame [!]
- duplicate [!]
- extra limbs [!]
- missing limbs [!]
- mutated [!]
- squint [!]
- grainy [!]
- ugly [!]

[–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏] ‚Äî –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –∏ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏:
- random hair color ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –≤–æ–ª–æ—Å
- random eye color ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –≥–ª–∞–∑
- random skin tone ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–Ω –∫–æ–∂–∏
- random background ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–æ–Ω
- random lighting ‚Äî —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
- dynamic lighting ‚Äî –¥–∏–Ω–∞–º–∏—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
- soft shadows ‚Äî –º—è–≥–∫–∏–µ —Ç–µ–Ω–∏
- motion blur ‚Äî —ç—Ñ—Ñ–µ–∫—Ç –¥–≤–∏–∂–µ–Ω–∏—è
- motion lines ‚Äî –ª–∏–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
- floating ‚Äî –ø–∞—Ä—è—â–∏–π
- wind blowing hair / wind effect ‚Äî –≤–µ—Ç–µ—Ä
- glowing elements / magical atmosphere ‚Äî –º–∞–≥–∏—è
- surreal / abstract shapes ‚Äî —Å—é—Ä—Ä–µ–∞–ª–∏–∑–º
- random accessories ‚Äî —Å–ª—É—á–∞–π–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
- random pose transitions ‚Äî —Å–º–µ–Ω–∞ –ø–æ–∑
- random facial expression ‚Äî –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞
- random angle ‚Äî —É–≥–æ–ª
- random camera position ‚Äî –ø–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã
- asymmetrical design ‚Äî –∞—Å–∏–º–º–µ—Ç—Ä–∏—è
- broken pattern ‚Äî –Ω–∞—Ä—É—à–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
- glitch effect ‚Äî –≥–ª–∏—Ç—á-—ç—Ñ—Ñ–µ–∫—Ç
- pastel colors / neon colors / monochrome ‚Äî —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã

---

–¢–µ–±—è –∑–æ–≤—É—Ç –ù–µ–π—Ä–æ. –¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã PowerShell, —É–ø—Ä–∞–≤–ª—è—Ç—å –º—ã—à—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª—ã, –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ, –∞ —Ç–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

–¢–´ –û–°–û–ë–ï–ù–ù–û –•–û–†–û–® –í:
- –ê–Ω–∞–ª–∏–∑–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
- –†–∞–∑–±–∏–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
- –ê–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—à–∏–±–æ–∫
- –û–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ —Ä–µ—à–µ–Ω–∏–π

–°–¢–†–û–ì–û –°–û–ë–õ–Æ–î–ê–ô –°–õ–ï–î–£–Æ–©–ò–ï –ü–†–ê–í–ò–õ–ê:

2. –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:
   - "powershell" ‚Äî –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ PowerShell
   - "search" ‚Äî –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
   - "generate_image" ‚Äî –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
   - "speak" ‚Äî –¥–ª—è –æ–∑–≤—É—á–∫–∏ –≤–∞–∂–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É —É—Å–ª—ã—à–∞—Ç—å)
   - "response" ‚Äî –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   - "move_mouse" ‚Äî –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –º—ã—à—å (x, y)
   - "left_click" ‚Äî –∫–ª–∏–∫ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ (x, y)
   - "right_click" ‚Äî –∫–ª–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ (x, y)
   - "scroll_up" ‚Äî –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö (pixels)
   - "scroll_down" ‚Äî –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ (pixels)
   - "mouse_down" ‚Äî –∑–∞–∂–∞—Ç—å –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ (x, y)
   - "mouse_up" ‚Äî –æ—Ç–ø—É—Å—Ç–∏—Ç—å –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ (x, y)
   - "drag_and_drop" ‚Äî –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å –º—ã—à—å—é (x1, y1, x2, y2)
   - "type_text" ‚Äî –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç (text)
   - "take_screenshot" ‚Äî —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

3. –ü–†–ê–í–ò–õ–û –û–ó–í–£–ß–ö–ò: –ò—Å–ø–æ–ª—å–∑—É–π –¥–µ–π—Å—Ç–≤–∏–µ "speak" —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É —É—Å–ª—ã—à–∞—Ç—å. 
   –û—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç (–æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –¥–µ—Ç–∞–ª–∏, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è) –ø–æ–º–µ—â–∞–π –≤ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç "response".
   –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç "—Å–∫–æ–ª—å–∫–æ 2+2", –æ–∑–≤—É—á—å —Ç–æ–ª—å–∫–æ "–ë—É–¥–µ—Ç 4", –∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –¥–µ—Ç–∞–ª–∏ 
   –ø–æ–º–µ—Å—Ç–∏ –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.

4. –§–æ—Ä–º–∞—Ç JSON –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é:
{
  "action": "move_mouse",
  "x": 123,
  "y": 456,
  "description": "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –º—ã—à—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ö'"
}
{
  "action": "left_click",
  "x": 123,
  "y": 456,
  "description": "–ö–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ '–û–ö'"
}
{
  "action": "right_click",
  "x": 123,
  "y": 456,
  "description": "–ü–ö–ú –ø–æ –æ–±—ä–µ–∫—Ç—É"
}
{
  "action": "scroll_up",
  "pixels": 100,
  "description": "–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö"
}
{
  "action": "scroll_down",
  "pixels": 100,
  "description": "–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–Ω–∏–∑"
}
{
  "action": "mouse_down",
  "x": 100,
  "y": 200,
  "description": "–ó–∞–∂–∞—Ç—å –õ–ö–ú –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è"
}
{
  "action": "mouse_up",
  "x": 200,
  "y": 200,
  "description": "–û—Ç–ø—É—Å—Ç–∏—Ç—å –õ–ö–ú –ø–æ—Å–ª–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è"
}
{
  "action": "drag_and_drop",
  "x1": 100,
  "y1": 200,
  "x2": 300,
  "y2": 400,
  "description": "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç—å –æ–±—ä–µ–∫—Ç"
}
{
  "action": "type_text",
  "text": "–ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞",
  "description": "–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç"
}
{
  "action": "take_screenshot",
  "description": "–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
}

–ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –û–ó–í–£–ß–ö–ò:
{
  "action": "speak",
  "text": "–í–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏",
  "voice": "male",
  "language": "ru",
  "description": "–û–∑–≤—É—á–∏—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
}

–ü–†–ò–ú–ï–† –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:
{
  "action": "generate_image",
  "text": "masterpiece, best quality, extremely detailed, anime girl, full body, detailed face, bright colors, standing pose",
  "negative_prompt": "(worst quality, low quality, normal quality:1.4), (deformed, distorted, disfigured:1.3), poorly drawn, bad anatomy",
  "description": "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∏–º–µ –¥–µ–≤–æ—á–∫–∏"
}

5. –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í:
   - –ù–∞ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ("–ø—Ä–∏–≤–µ—Ç", "hello", "–∫–∞–∫ –¥–µ–ª–∞") –æ—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ–º "response"
   - –î–ª—è –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö (–∫–ª–∏–∫, –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏, –∫–æ–º–∞–Ω–¥—ã) –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
   - –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω, –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–π—Å—Ç–≤–∏–µ–º "response"
   - –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô: –∏—Å–ø–æ–ª—å–∑—É–π –¥–µ–π—Å—Ç–≤–∏–µ "generate_image" —Å –ø–æ–ª–µ–º "text" —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ

6. –§–û–†–ú–ê–¢ JSON –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:
   –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç:
   {
     "action": "generate_image",
     "text": "–ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ —Å —Ç–µ–≥–∞–º–∏",
     "negative_prompt": "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
     "description": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å"
   }
   
   –ü–æ–ª–µ "text" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Stable Diffusion –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.
   –ü–æ–ª–µ "negative_prompt" —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç (—á—Ç–æ –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏).
   –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <think> –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã - —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON!

7. –†–ê–ë–û–¢–ê –°–û –°–ö–†–ò–ù–®–û–¢–ê–ú–ò:
   - –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ü–ö (–∫–ª–∏–∫, –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏), —Å–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–∫—Ä–∞–Ω–∞.
   - Vision-–º–æ–¥–µ–ª—å –æ–ø–∏—à–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Ä–∞–Ω–∞, –≤–∫–ª—é—á–∞—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤.
   - –ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞–π —Ä–µ—à–µ–Ω–∏—è –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.
   - –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

8. –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ –ò –ê–î–ê–ü–¢–ê–¶–ò–Ø:
   - –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è), —É–∫–∞–∂–∏ —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
   - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏–π –∏ —Å–æ–æ–±—â–∞–π –æ–± —É—Å–ø–µ—Ö–µ/–Ω–µ—É–¥–∞—á–µ.
   - –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø—Ä–µ–¥–ª–∞–≥–∞–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.
   - –£—á–∏—Å—å –Ω–∞ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –∏ —É–ª—É—á—à–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.

9. –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–û–ï –ú–´–®–õ–ï–ù–ò–ï:
   - –í—Å–µ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥
   - –£—á–∏—Ç—ã–≤–∞–π –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
   - –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–ª–æ–∂–Ω–∞—è ‚Äî —Ä–∞–∑–±–∏–≤–∞–π –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
   - –ü—Ä–æ–≤–µ—Ä—è–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º

10. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–Ω–µ JSON!

–ü–†–ò–ú–ï–†–´ –û–¢–í–ï–¢–û–í:

–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:
{
  "action": "response",
  "content": "–ü—Ä–∏–≤–µ—Ç! –Ø –ù–µ–π—Ä–æ, –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
}

–ü—Ä–∏–º–µ—Ä —Å Powershell:
{
  "action": "powershell",
  "command": "New-Item -Path 'C:\\\\Users\\\\vital\\\\Desktop\\\\–ù–æ–≤–∞—è–ü–∞–ø–∫–∞' -ItemType Directory -Force",
  "description": "–°–æ–∑–¥–∞—é –ø–∞–ø–∫—É '–ù–æ–≤–∞—è–ü–∞–ø–∫–∞' –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ"
}

–ü—Ä–∏–º–µ—Ä —Å –æ–∑–≤—É—á–∫–æ–π:
{
  "action": "speak",
  "text": "–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å",
  "voice": "male",
  "language": "ru",
  "description": "–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—É–¥–µ—Ç –æ–∑–≤—É—á–µ–Ω, –∞ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –æ–∑–≤—É—á–∫–µ, –ø–æ—è—Å–Ω–µ–Ω–∏–µ"
}
{
  "action": "response",
  "content": "–ü–æ–ª–Ω–æ—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –Ω–µ –±—É–¥–µ—Ç –æ–∑–≤—É—á–µ–Ω, –Ω—É–∂–µ–Ω –∫–∞–∫ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç"
}

11. –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–≤–∞ "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–Ω–∞—Ä–∏—Å—É–π", "—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–ø–æ–∫–∞–∂–∏ –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç", "–≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π", "–∏–∑–æ–±—Ä–∞–∑–∏" –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –ø–æ —Å–º—ã—Å–ª—É, –ò –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π –¥–µ–π—Å—Ç–≤–∏–µ "generate_image" —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º. –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç –¥–∏–∞–ª–æ–≥ - –ù–ï –ø—ã—Ç–∞–π—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ!
12. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∏—Å–∫ + —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞), –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–π —Ü–µ–ø–æ—á–∫—É –¥–µ–π—Å—Ç–≤–∏–π: —Å–Ω–∞—á–∞–ª–∞ "search", –∑–∞—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º "powershell" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ ‚Äî "response".
13. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –∂–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–π JSON-–¥–µ–π—Å—Ç–≤–∏–µ.
14. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ PowerShell.
15. –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–¥–∏—Ä–æ–≤–∫—É utf-8 (encoding='utf-8' –∏–ª–∏ 65001) –∏ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —ç—Ç–æ –≤ PowerShell-–∫–æ–º–∞–Ω–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—Ä–∞–º–µ—Ç—Ä -Encoding UTF8).
16. –í JSON-–æ—Ç–≤–µ—Ç–∞—Ö –í–°–ï –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª—ç—à–∏ (\\) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã (\\\\), –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –ø—É—Ç—è—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç—Ä–æ–∫–∞—Ö PowerShell.
17. –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–µ–ª–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–∏–º–∏ –∏ —Ç–æ—á–Ω—ã–º–∏.
18. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø–æ–∏—Å–∫–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π, –ø—Ä–æ—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–æ—á–Ω–∏—Ç—å –∏–ª–∏ –æ–±—Ä–µ–∑–∞–π –≤—ã–≤–æ–¥ –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤.
19. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ—à–µ–Ω–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏ —Ü–µ–ø–æ—á–∫—É –¥–µ–π—Å—Ç–≤–∏–µ–º "response".
20. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –¥–µ–π—Å—Ç–≤–∏—è –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
21. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, —É—Ç–æ—á–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
22. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Desktop: C:\\Users\\vital\\Desktop

–ù–û–í–´–ï –ü–†–ê–í–ò–õ–ê –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò –ò –í–ò–î–ï–û:
23. –ï—Å–ª–∏ —Ç–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞.
24. –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–¥–µ–ª—è–π –≤–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç—É, —Ü–∏—Ñ—Ä–∞–º, –¥–∏–∞–≥—Ä–∞–º–º–∞–º –∏ –¥—Ä—É–≥–∏–º –¥–∞–Ω–Ω—ã–º.
25. –ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–ø–∏—à–∏ –µ–≥–æ —Ç–æ—á–Ω–æ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
26. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–ø—Ä–æ—Å.
27. –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [–ü–æ–∫–∞–¥—Ä–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ]: ... ‚Äî —ç—Ç–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–π –∫–∞–¥—Ä–æ–≤ –≤–∏–¥–µ–æ —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤ –≤–∏–¥–µ–æ, —Å–≤—è–∑—ã–≤–∞–π –æ–±—ä–µ–∫—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
28. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ–∫—Ü–∏—è [–¢–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ]: ... —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏, —ç—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–π–º–∫–æ–¥—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä—è–¥–∞.
29. –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–¥–µ–æ —É—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥—ã–π —Ç–∞–π–º–∫–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –º–æ–º–µ–Ω—Ç—É –≤—Ä–µ–º–µ–Ω–∏. –ú–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Å–æ–±—ã—Ç–∏–π, –ø–æ—è–≤–ª–µ–Ω–∏–∏/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤, –¥–µ–π—Å—Ç–≤–∏—è—Ö –∏ —Ç.–¥.
30. –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –∞—É–¥–∏–æ, –∏ –ø–æ–∫–∞–¥—Ä–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Å—Ç–∞—Ä–∞–π—Å—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Å–æ–≤–º–µ—Å—Ç–Ω–æ, —á—Ç–æ–±—ã –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç.
31. –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –∫–∞–¥—Ä–æ–≤ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–π –∏—Ö –≤ –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–∞–π–º–∫–æ–¥–æ–≤ [start-end]: –æ–ø–∏—Å–∞–Ω–∏–µ. –ï—Å–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –Ω–æ –Ω–µ –ø–æ–¥—Ä—è–¥ ‚Äî —Å–æ–±–∏—Ä–∞–π —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–∫–æ–¥–æ–≤ [t1, t2, t3]: –æ–ø–∏—Å–∞–Ω–∏–µ.

–ü–û–ú–ù–ò: –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥, –∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –¥—É–º–∞–µ—Ç, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è!
"""

    def auto_disable_tools(self, tool_name: Optional[str] = None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        import threading
        import time
        
        def disable_tool(tool_name):
            time.sleep(self.auto_disable_delay)
            if tool_name == 'image_generation':
                if hasattr(self, 'use_image_generation'):
                    self.use_image_generation = False
                    logger.info(f"üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∏–ª {tool_name}")
            elif tool_name == 'vision':
                if hasattr(self, 'use_vision'):
                    self.use_vision = False
                    logger.info(f"üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∏–ª {tool_name}")
            elif tool_name == 'audio':
                if hasattr(self, 'use_audio'):
                    self.use_audio = False
                    logger.info(f"üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∏–ª {tool_name}")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≥–æ
        if tool_name:
            if tool_name not in self.tool_timers or not self.tool_timers[tool_name].is_alive():
                timer = threading.Thread(target=disable_tool, args=(tool_name,), daemon=True)
                self.tool_timers[tool_name] = timer
                timer.start()
                logger.info(f"‚è∞ –ó–∞–ø—É—Å—Ç–∏–ª —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {tool_name}")
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            for tool_name in ['image_generation', 'vision', 'audio']:
                if tool_name not in self.tool_timers or not self.tool_timers[tool_name].is_alive():
                    timer = threading.Thread(target=disable_tool, args=(tool_name,), daemon=True)
                    self.tool_timers[tool_name] = timer
                    timer.start()
                    logger.info(f"‚è∞ –ó–∞–ø—É—Å—Ç–∏–ª —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {tool_name}")
                
    def _log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å"""
        timestamp = time.strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {level}: {message}"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        if level == "ERROR":
            logger.error(message)
        elif level == "WARNING":
            logger.warning(message)
        else:
            logger.info(message)
        
        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        print(formatted_message)
    
    def get_context_info(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        return f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {self.current_context_length:,} —Ç–æ–∫–µ–Ω–æ–≤ / {self.safe_context_length:,} (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π) / {self.max_context_length:,} (–º–∞–∫—Å–∏–º—É–º)"

    def add_performance_metric(self, action: str, response_time: float, context_length: int = 0):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        metric = {
            "timestamp": time.time(),
            "action": action,
            "response_time": response_time,
            "context_length": context_length
        }
        self.performance_metrics.append(metric)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫
        if len(self.performance_metrics) > 100:
            self.performance_metrics.pop(0)
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.performance_metrics:
            return {"total_actions": 0, "avg_response_time": 0, "recent_metrics": []}
        
        total_actions = len(self.performance_metrics)
        avg_response_time = sum(m["response_time"] for m in self.performance_metrics) / total_actions
        recent_metrics = self.performance_metrics[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–µ—Ç—Ä–∏–∫
        
        return {
            "total_actions": total_actions,
            "avg_response_time": round(avg_response_time, 3),
            "recent_metrics": recent_metrics
        }

    def take_screenshot(self) -> str:
        """
        –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64
        """
        try:
            # mss —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
            with mss.mss() as sct:
                # –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
                monitor = sct.monitors[1]  # 0 - –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã, 1 - –æ—Å–Ω–æ–≤–Ω–æ–π
                screenshot = sct.grab(monitor)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
                img = Image.frombytes("RGB", screenshot.size, screenshot.rgb)
                # –°–∂–∏–º–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
                img.thumbnail((1280, 720), Image.Resampling.LANCZOS)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                buf = BytesIO()
                img.save(buf, format="PNG", optimize=True)
                return base64.b64encode(buf.getvalue()).decode("ascii")
        except ImportError:
            logger.warning("mss –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º pyautogui")
            try:
                # pyautogui —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
                screenshot = pyautogui.screenshot()
                screenshot.thumbnail((1280, 720), Image.Resampling.LANCZOS)
                buf = BytesIO()
                screenshot.save(buf, format="PNG", optimize=True)
                return base64.b64encode(buf.getvalue()).decode("ascii")
            except ImportError:
                logger.error("pyautogui –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return ""

    def move_mouse(self, x: int, y: int) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x, y)"""
        try:
            # pyautogui —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
            pyautogui.moveTo(x, y, duration=0.2)
            return {"success": True, "message": f"–ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ ({x}, {y})"}
        except ImportError:
            return {"success": False, "error": "pyautogui –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        except Exception as e:
            return {"success": False, "error": str(e)}

    def left_click(self, x: int, y: int) -> Dict[str, Any]:
        """–ö–ª–∏–∫ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (x, y)"""
        try:
            # pyautogui —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
            pyautogui.click(x, y)
            return {"success": True, "message": f"–õ–ö–ú –∫–ª–∏–∫ –≤ ({x}, {y})"}
        except ImportError:
            return {"success": False, "error": "pyautogui –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        except Exception as e:
            return {"success": False, "error": str(e)}

    def right_click(self, x: int, y: int) -> Dict[str, Any]:
        """–ö–ª–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (x, y)"""
        try:
            # pyautogui —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
            pyautogui.rightClick(x, y)
            return {"success": True, "message": f"–ü–ö–ú –∫–ª–∏–∫ –≤ ({x}, {y})"}
        except ImportError:
            return {"success": False, "error": "pyautogui –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        except Exception as e:
            return {"success": False, "error": str(e)}

    def scroll(self, pixels: int) -> Dict[str, Any]:
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –≤–≤–µ—Ä—Ö, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ - –≤–Ω–∏–∑"""
        try:
            # pyautogui —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
            pyautogui.scroll(pixels)
            direction = "–≤–≤–µ—Ä—Ö" if pixels > 0 else "–≤–Ω–∏–∑"
            return {"success": True, "message": f"–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {direction} –Ω–∞ {abs(pixels)} –ø–∏–∫—Å–µ–ª–µ–π"}
        except ImportError:
            return {"success": False, "error": "pyautogui –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        except Exception as e:
            return {"success": False, "error": str(e)}

    def mouse_down(self, x: int, y: int) -> Dict[str, Any]:
        """–ó–∞–∂–∞—Ç—å –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (x, y)"""
        try:
            # pyautogui —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
            pyautogui.moveTo(x, y)
            pyautogui.mouseDown(button='left')
            return {"success": True, "message": f"–õ–ö–ú –∑–∞–∂–∞—Ç–∞ –≤ ({x}, {y})"}
        except ImportError:
            return {"success": False, "error": "pyautogui –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        except Exception as e:
            return {"success": False, "error": str(e)}

    def mouse_up(self, x: int, y: int) -> Dict[str, Any]:
        """–û—Ç–ø—É—Å—Ç–∏—Ç—å –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (x, y)"""
        try:
            # pyautogui —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–µ
            pyautogui.moveTo(x, y)
            pyautogui.mouseUp(button='left')
            return {"success": True, "message": f"–õ–ö–ú –æ—Ç–ø—É—â–µ–Ω–∞ –≤ ({x}, {y})"}
        except ImportError:
            return {"success": False, "error": "pyautogui –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        except Exception as e:
            return {"success": False, "error": str(e)}

    def drag_and_drop(self, x1: int, y1: int, x2: int, y2: int) -> Dict[str, Any]:
        """–ü–µ—Ä–µ—Ç–∞—â–∏—Ç—å –º—ã—à—å—é –∏–∑ (x1, y1) –≤ (x2, y2)"""
        try:
            import pyautogui
            pyautogui.dragTo(x2, y2, duration=0.5, button='left')
            return {"success": True, "message": f"–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∏–∑ ({x1}, {y1}) –≤ ({x2}, {y2})"}
        except ImportError:
            return {"success": False, "error": "pyautogui –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        except Exception as e:
            return {"success": False, "error": str(e)}

    def type_text(self, text: str) -> Dict[str, Any]:
        """–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç"""
        try:
            import pyautogui
            pyautogui.typewrite(text, interval=0.05)
            return {"success": True, "message": f"–í–≤–µ–¥—ë–Ω —Ç–µ–∫—Å—Ç: {text}"}
        except ImportError:
            return {"success": False, "error": "pyautogui –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        except Exception as e:
            return {"success": False, "error": str(e)}

    def start_continuous_recording(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        if self.continuous_recording:
            return
        
        self.continuous_recording = True
        self.recording_thread = threading.Thread(target=self._continuous_recording_worker, daemon=True)
        self.recording_thread.start()
        logger.info("–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≥–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞")

    def stop_continuous_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        self.continuous_recording = False
        if self.recording_thread:
            self.recording_thread.join(timeout=2)
        logger.info("–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≥–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def _continuous_recording_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)"""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–µ—Ä–µ–∑ API
        while self.continuous_recording:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ—á–∞–Ω–∫–æ–≤
                if not self.audio_queue.empty():
                    audio_data = self.audio_queue.get_nowait()
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
                    self._process_audio_chunk(audio_data)
                time.sleep(0.1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ continuous recording worker: {e}")

    def _process_audio_chunk(self, audio_data: bytes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ –∞—É–¥–∏–æ –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞–Ω–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_dir = os.path.join(os.path.dirname(__file__), "temp_audio")
            os.makedirs(temp_dir, exist_ok=True)
            temp_file = os.path.join(temp_dir, f"chunk_{int(time.time())}.wav")
            
            with open(temp_file, 'wb') as f:
                f.write(audio_data)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –∞—É–¥–∏–æ
            transcript = self.transcribe_audio_whisper(temp_file, use_separator=False)
            
            if transcript and not transcript.startswith("[Whisper error]"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∏–º—è "–ê–ª–∏—Å–∞"
                if self._is_valid_command(transcript):
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –≥–æ–ª–æ—Å–∞: {transcript}")
                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    screenshot_b64 = self.take_screenshot()
                    vision_desc = ""
                    if screenshot_b64:
                        vision_desc = self.call_vision_model(screenshot_b64)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–∑–≥–∞
                    brain_input = f"[–°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞]: {vision_desc}\n\n–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: {transcript}"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–∑–≥
                    ai_response = self.call_brain_model(brain_input)
                    self.process_ai_response(ai_response)
                else:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
                    pass
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(temp_file)
            except Exception:
                pass
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—á–∞–Ω–∫–∞: {e}")

    def _is_valid_command(self, text: str) -> bool:
        """–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        return True

    def call_vision_model(self, image_base64: str) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ vision-–º–æ–¥–µ–ª—å ("–≥–ª–∞–∑–∞")
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç).
        """
        start_time = time.time()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º vision –º–æ–¥–µ–ª—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not getattr(self, 'use_vision', False):
            logger.info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞—é vision –º–æ–¥–µ–ª—å")
            self.use_vision = True
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            self.auto_disable_tools("vision")
        
        try:
            payload = {
                "model": "moondream2-llamafile",
                "messages": [
                    {"role": "user", "content": [
                        {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{image_base64}"}}
                    ]}
                ],
                "temperature": 0.0,
                "max_tokens": 2048,
                "stream": False
            }
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ vision-–º–æ–¥–µ–ª—å (–≥–ª–∞–∑–∞)")
            response = requests.post(
                f"{self.lm_studio_url}/v1/chat/completions",
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            if response.status_code == 200:
                result = response.json()
                return result["choices"][0]["message"]["content"].strip()
            else:
                error_msg = f"–û—à–∏–±–∫–∞ vision-–º–æ–¥–µ–ª–∏: {response.status_code} - {response.text}"
                logger.error(error_msg)
                return f"[Vision error] {error_msg}"
        except Exception as e:
            error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ vision: {str(e)}"
            logger.error(error_msg)
            return f"[Vision error] {error_msg}"
        finally:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            response_time = time.time() - start_time
            self.add_performance_metric("vision_processing", response_time)
            logger.info(f"üëÅÔ∏è Vision –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞ {response_time:.2f} —Å–µ–∫")

    def call_brain_model(self, user_message: str, vision_desc: str = "") -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) –≤ "–º–æ–∑–≥" (—Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å)
        """
        start_time = time.time()
        try:
            # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø–æ–º–æ—â—å—é –ø–∞–º—è—Ç–∏ ChromaDB
            enhanced_system_prompt = self.enhance_prompt_with_memory(user_message, self.system_prompt)
            
            messages: List[Dict[str, Any]] = [
                {"role": "system", "content": enhanced_system_prompt}
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            messages.extend(self.conversation_history)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if vision_desc:
                messages.append({"role": "user", "content": vision_desc})
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.append({"role": "user", "content": user_message})
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º - –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É
            total_length = sum(len(str(msg.get("content", ""))) for msg in messages)
            self.current_context_length = total_length
            
            # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É)
            if total_length > self.safe_context_length:
                self.conversation_history = self.conversation_history[-5:]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ({total_length:,} —Å–∏–º–≤–æ–ª–æ–≤ > {self.safe_context_length:,}) - –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏")
            
            # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏
            messages = [{"role": "system", "content": enhanced_system_prompt}]
            messages.extend(self.conversation_history)
            if vision_desc:
                messages.append({"role": "user", "content": vision_desc})
            messages.append({"role": "user", "content": user_message})
            
            payload = {
                "model": self.brain_model_id if hasattr(self, 'brain_model_id') and self.brain_model_id else self.brain_model,
                "messages": messages,
                "temperature": 0.1,
                "max_tokens": 32767,
                "stream": False
            }
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ –º–æ–∑–≥: {user_message[:100]}...")
            response = requests.post(
                f"{self.lm_studio_url}/v1/chat/completions",
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            if response.status_code == 200:
                result = response.json()
                ai_response = result["choices"][0]["message"]["content"].strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
                usage_info = result.get("usage", {})
                prompt_tokens = usage_info.get("prompt_tokens", 0)
                completion_tokens = usage_info.get("completion_tokens", 0)
                total_tokens = usage_info.get("total_tokens", 0)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ total_tokens
                if total_tokens > 0:
                    self.current_context_length = total_tokens
                    logger.info(f"üìä –†–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: prompt={prompt_tokens}, completion={completion_tokens}, total={total_tokens}")
                    
                    # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                    self._trim_context_if_needed()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π)
                if ai_response and ai_response != "{}":
                    self.conversation_history.append({"role": "user", "content": user_message})
                    self.conversation_history.append({"role": "assistant", "content": ai_response})
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ ChromaDB
                    self.auto_save_conversation(user_message, ai_response, vision_desc)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
                    self.extract_preferences_from_response(user_message, ai_response)
                
                return ai_response
            else:
                error_msg = f"–û—à–∏–±–∫–∞ brain-–º–æ–¥–µ–ª–∏: {response.status_code} - {response.text}"
                logger.error(error_msg)
                return f"[Brain error] {error_msg}"
        except Exception as e:
            error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ brain: {str(e)}"
            logger.error(error_msg)
            return f"[Brain error] {error_msg}"
        finally:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            response_time = time.time() - start_time
            self.add_performance_metric("brain_response", response_time, self.current_context_length)
            logger.info(f"üß† –ú–æ–∑–≥ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {response_time:.2f} —Å–µ–∫")

    def execute_powershell(self, command: str) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ PowerShell –∫–æ–º–∞–Ω–¥—ã
        
        Args:
            command: PowerShell –∫–æ–º–∞–Ω–¥–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            orig_command = command
            # –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∑–∞–º–µ–Ω—è–µ–º '&&' –Ω–∞ PowerShell-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            if '&&' in command:
                parts = [p.strip() for p in command.split('&&')]
                # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å cd, –¥–µ–ª–∞–µ–º push-location, –∑–∞—Ç–µ–º –≤—Ç–æ—Ä—É—é –∫–æ–º–∞–Ω–¥—É
                if parts[0].lower().startswith('cd '):
                    dir_path = parts[0][3:].strip().strip('"\'')
                    command = f"Push-Location '{dir_path}'; {parts[1]} ; Pop-Location"
                else:
                    # –ü—Ä–æ—Å—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ ';'
                    command = ' ; '.join(parts)
                logger.info(f"PowerShell: –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω '&&' -> ';' –∏–ª–∏ Push-Location: {command}")
            logger.info(f"–í—ã–ø–æ–ª–Ω—è—é PowerShell: {command}")
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É PowerShell —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º cp1251 –∏ –∑–∞—â–∏—Ç–æ–π
            result = subprocess.run(
                ["powershell", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command", command],
                capture_output=True,
                text=True,
                encoding='cp1251',
                errors='replace',
                timeout=60
            )
            success = result.returncode == 0
            # –ó–∞—â–∏—Ç–∞ –æ—Ç None
            output = (result.stdout if success else result.stderr) or ""
            logger.info(f"PowerShell —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∫–æ–¥: {result.returncode}): {output[:200]}...")
            return {
                "success": success,
                "returncode": result.returncode,
                "output": output,
                "error": (result.stderr or "") if not success else ""
            }
        except subprocess.TimeoutExpired:
            error_msg = "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (60 —Å–µ–∫)"
            logger.error(error_msg)
            return {"success": False, "returncode": -1, "output": "", "error": error_msg}
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è PowerShell: {str(e)}"
            logger.error(error_msg)
            return {"success": False, "returncode": -1, "output": "", "error": error_msg}

    def google_search(self, query: str, num_results: int = 10) -> List[Dict[str, str]]:
        """
        –ü–æ–∏—Å–∫ –≤ Google Custom Search API
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            num_results: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        """
        try:
            if not self.google_api_key or not self.google_cse_id:
                return [{"error": "Google API –∫–ª—é—á –∏–ª–∏ CSE ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"}]
            
            logger.info(f"–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ Google: {query}")
            
            # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è URL
            encoded_query = urllib.parse.quote(query)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Google Custom Search API (–º–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            url = f"https://www.googleapis.com/customsearch/v1?key={self.google_api_key}&cx={self.google_cse_id}&q={encoded_query}&num=10"
            
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if "items" not in data:
                    return [{"error": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}]
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ num_results —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–º–∞–∫—Å–∏–º—É–º 10)
                actual_results = min(num_results, 10)
                search_results = []
                for i, item in enumerate(data["items"][:actual_results]):
                    result = {
                        "title": item.get("title", ""),
                        "url": item.get("link", ""),
                        "snippet": item.get("snippet", "")
                    }
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    try:
                        page_response = requests.get(result["url"], timeout=5, headers={
                            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                        })
                        if page_response.status_code == 200:
                            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                            content = page_response.text[:2000]
                            result["content"] = content
                        else:
                            result["content"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                    except:
                        result["content"] = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                    
                    search_results.append(result)
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç {i+1}: {result['title']}")
                
                logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return search_results
            else:
                error_msg = f"–û—à–∏–±–∫–∞ Google Search API: {response.status_code}"
                logger.error(error_msg)
                return [{"error": error_msg}]
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Google: {str(e)}"
            logger.error(error_msg)
            return [{"error": error_msg}]

    def process_ai_response(self, ai_response: str) -> bool:
        """Light wrapper to keep `process_ai_response` simple for static analysers.

        –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ `_process_ai_response_impl`.
        –≠—Ç–æ —É–º–µ–Ω—å—à–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–∏–¥–∏–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Pylance.
        """
        return self._process_ai_response_impl(ai_response)

    # --- –†–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—É–º–µ–Ω—å—à–∞—é—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞) ---
    def _is_english_simple(self, s: str) -> bool:
        if not s:
            return False
        allowed_chars = 0
        total_chars = len(s)
        for c in s:
            if (c.isascii() and (c.isalpha() or c.isdigit()) or
                c in '.,;:-_=+!@#$%^&*()[]{}<>?/\\|`~\'\" ' or
                c.isspace()):
                allowed_chars += 1
        return allowed_chars / total_chars > 0.85

    def _handle_powershell(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        command = action_data.get("command", "")
        description = action_data.get("description", "")
        logger.info(f"\nüîß –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î–´: {description}")
        logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞: {command}")
        result = self.execute_powershell(command)
        if result["success"]:
            feedback = f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['output']}"
        else:
            feedback = f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {result.get('error','') }"
        follow_up = self.call_brain_model(feedback)
        return follow_up

    def _handle_search(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        query = action_data.get("query", "")
        description = action_data.get("description", "")
        logger.info(f"\nüîç –ü–û–ò–°–ö –í –ò–ù–¢–ï–†–ù–ï–¢–ï: {description}")
        logger.info(f"üîé –ó–∞–ø—Ä–æ—Å: {query}")
        search_results = self.google_search(query)
        results_text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
        for i, result in enumerate(search_results, 1):
            if "error" in result:
                results_text += f"{i}. –û—à–∏–±–∫–∞: {result['error']}\n"
            else:
                results_text += f"{i}. {result['title']}\n"
                results_text += f"   URL: {result['url']}\n"
                results_text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {result['snippet']}\n"
                results_text += f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result.get('content', '')}\n\n"
        logger.info("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
        follow_up = self.call_brain_model(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {results_text}")
        return follow_up

    def _handle_take_screenshot(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        logger.info(f"\nüì∏ –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ù–®–û–¢–ê")
        if not getattr(self, 'use_vision', False):
            logger.info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞—é vision –º–æ–¥–µ–ª—å")
            self.use_vision = True
            self.auto_disable_tools("vision")
        screenshot_b64 = self.take_screenshot()
        if screenshot_b64:
            vision_desc = self.call_vision_model(screenshot_b64)
            feedback = f"–°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –ø–æ–ª—É—á–µ–Ω. –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç vision-–º–æ–¥–µ–ª–∏: {vision_desc}"
        else:
            feedback = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"
        follow_up = self.call_brain_model(feedback)
        return follow_up

    def _handle_move_mouse(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        x = action_data.get("x", 0)
        y = action_data.get("y", 0)
        description = action_data.get("description", "")
        logger.info(f"\nüñ±Ô∏è –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –ú–´–®–ò: {description}")
        result = self.move_mouse(x, y)
        feedback = f"–ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({x}, {y})" if result.get("success") else f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏: {result.get('error','') }"
        follow_up = self.call_brain_model(feedback)
        return follow_up

    def _handle_left_click(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        x = action_data.get("x", 0)
        y = action_data.get("y", 0)
        result = self.left_click(x, y)
        feedback = f"–ö–ª–∏–∫ –õ–ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ({x}, {y})" if result.get("success") else f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {result.get('error','') }"
        follow_up = self.call_brain_model(feedback)
        return follow_up

    def _handle_right_click(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        x = action_data.get("x", 0)
        y = action_data.get("y", 0)
        result = self.right_click(x, y)
        feedback = f"–ö–ª–∏–∫ –ü–ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ({x}, {y})" if result.get("success") else f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ü–ö–ú: {result.get('error','') }"
        follow_up = self.call_brain_model(feedback)
        return follow_up

    def _handle_scroll(self, action: str, action_data: Dict[str, Any]) -> Union[bool, str]:
        pixels = action_data.get("pixels", 100)
        if action == "scroll_down":
            pixels = -pixels
        result = self.scroll(pixels)
        feedback = f"–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result.get('message','') }" if result.get("success") else f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {result.get('error','') }"
        follow_up = self.call_brain_model(feedback)
        return follow_up

    def _handle_mouse_down(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        x = action_data.get("x", 0)
        y = action_data.get("y", 0)
        result = self.mouse_down(x, y)
        feedback = f"–õ–ö–ú –∑–∞–∂–∞—Ç–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ({x}, {y})" if result.get("success") else f"–û—à–∏–±–∫–∞ –∑–∞–∂–∞—Ç–∏—è –õ–ö–ú: {result.get('error','') }"
        follow_up = self.call_brain_model(feedback)
        return follow_up

    def _handle_mouse_up(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        x = action_data.get("x", 0)
        y = action_data.get("y", 0)
        result = self.mouse_up(x, y)
        feedback = f"–õ–ö–ú –æ—Ç–ø—É—â–µ–Ω–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ({x}, {y})" if result.get("success") else f"–û—à–∏–±–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –õ–ö–ú: {result.get('error','') }"
        follow_up = self.call_brain_model(feedback)
        return follow_up

    def _handle_drag_and_drop(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        x1 = action_data.get("x1", 0)
        y1 = action_data.get("y1", 0)
        x2 = action_data.get("x2", 0)
        y2 = action_data.get("y2", 0)
        result = self.drag_and_drop(x1, y1, x2, y2)
        feedback = f"–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç ({x1}, {y1}) –∫ ({x2}, {y2})" if result.get("success") else f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è: {result.get('error','') }"
        follow_up = self.call_brain_model(feedback)
        return follow_up

    def _handle_type_text(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        text = action_data.get("text", "")
        result = self.type_text(text)
        feedback = f"–¢–µ–∫—Å—Ç –≤–≤–µ–¥—ë–Ω: {text}" if result.get("success") else f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {result.get('error','') }"
        follow_up = self.call_brain_model(feedback)
        return follow_up

    def _handle_generate_image(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        if not getattr(self, 'use_image_generation', False):
            logger.info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            self.use_image_generation = True
            self.auto_disable_tools("image_generation")
        if not getattr(self, 'use_image_generation', False):
            logger.error("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            follow_up = self.call_brain_model("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return follow_up

        description = action_data.get("description", "")
        text = action_data.get("text", "")
        style = action_data.get("style", "")
        negative_prompt = action_data.get("negative_prompt", "")
        prompt = text.strip() if text else (description or "")
        if style and prompt:
            prompt += f", {style}"

        params = {}
        if not isinstance(params, dict):
            params = {}

        if not prompt:
            follow_up = self.call_brain_model("–ù–µ–π—Ä–æ—Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ—Å–∏ –µ—ë —Å–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.")
            return follow_up

        if not self._is_english_simple(prompt):
            follow_up = self.call_brain_model(f"–ù–µ–π—Ä–æ—Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ –ø—Ä–æ–º—Ç –Ω–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ: {prompt}. –ü–æ–ø—Ä–æ—Å–∏ –µ—ë —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.")
            return follow_up

        neg = negative_prompt.strip() if negative_prompt else ""
        if not neg or not self._is_english_simple(neg):
            neg = "(worst quality, low quality, normal quality:1.4)"

        # default params and validation (kept simple here)
        default_params = {"seed": -1, "steps": 30, "width": 1024, "height": 1024, "cfg": 4.0}
        gen_params = default_params.copy()

        img_b64 = self.generate_image_stable_diffusion(prompt, neg, gen_params)
        if img_b64:
            self.last_generated_image_b64 = img_b64
            self.show_image_base64_temp(img_b64)
            final_msg = f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é: {description}\nüé® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º—Ç: {prompt}"
            self.last_final_response = final_msg
            logger.info(final_msg)
            return False
        else:
            follow_up = self.call_brain_model(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: {description}.")
            return follow_up

    def _handle_generate_video(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        if not getattr(self, 'use_image_generation', False):
            logger.info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            self.use_image_generation = True
            self.auto_disable_tools("image_generation")
        if not getattr(self, 'use_image_generation', False):
            follow_up = self.call_brain_model("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return follow_up

        description = action_data.get("description", "")
        text = action_data.get("text", "")
        style = action_data.get("style", "")
        negative_prompt = action_data.get("negative_prompt", "")
        prompt = text.strip() if text else (description or "")
        if style and prompt:
            prompt += f", {style}"

        if not prompt:
            follow_up = self.call_brain_model("–ù–µ–π—Ä–æ—Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ—Å–∏ –µ—ë —Å–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.")
            return follow_up

        # negative prompt handling
        neg = negative_prompt.strip() if negative_prompt else ""
        fallback_negative = "(worst quality, low quality, normal quality:1.4), (deformed, distorted, disfigured:1.3), poorly drawn, bad anatomy, text, watermark"
        if not neg or not self._is_english_simple(neg):
            neg = fallback_negative

        # default video params and validation
        default_params = {"seed": -1, "steps": 20, "width": 512, "height": 512, "cfg": 7.0, "num_frames": 24, "fps": 8}
        params = action_data.get("params", {}) or {}
        gen_params = default_params.copy()
        if isinstance(params, dict):
            for key, value in params.items():
                if key in default_params:
                    try:
                        if key in ["seed", "steps", "width", "height", "num_frames", "fps"]:
                            gen_params[key] = int(value)
                        elif key == "cfg":
                            gen_params[key] = float(value)
                        else:
                            gen_params[key] = value
                    except (ValueError, TypeError):
                        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä {key}={value}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

        # basic bounds
        if gen_params["steps"] < 1 or gen_params["steps"] > 100:
            gen_params["steps"] = 20
        if gen_params["width"] < 64 or gen_params["width"] > 2048:
            gen_params["width"] = 512
        if gen_params["height"] < 64 or gen_params["height"] > 2048:
            gen_params["height"] = 512

        video_path = self.generate_video_stable_diffusion(prompt, neg, gen_params)
        if video_path:
            final_msg = f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é: {description}\nüìÅ –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ: {video_path}"
            self.last_final_response = final_msg
            logger.info(final_msg)
            return False
        else:
            follow_up = self.call_brain_model(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: {description}.")
            return follow_up

    def _handle_speak(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        text_to_speak = action_data.get("text", "")
        voice = action_data.get("voice", "male")
        language = action_data.get("language", "ru")
        if not text_to_speak:
            follow_up = self.call_brain_model("–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –ø—É—Å—Ç–æ–π. –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ 'text'.")
            return follow_up
        audio_path = self.text_to_speech(text_to_speak, voice, language)
        if audio_path:
            follow_up = self.call_brain_model(f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–∑–≤—É—á–µ–Ω: {text_to_speak}. –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(audio_path)}")
        else:
            follow_up = self.call_brain_model(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç: {text_to_speak}.")
        return follow_up

    def _handle_response(self, action_data: Dict[str, Any]) -> Union[bool, str]:
        content = action_data.get("content", "")
        self.last_final_response = content
        logger.info(f"\nü§ñ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢:")
        logger.info(content)
        return False

    def _process_ai_response_impl(self, ai_response: str) -> bool:
        """
        –ü–æ–¥—Ä–æ–±–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ original `process_ai_response`).

        Args:
            ai_response: JSON –æ—Ç–≤–µ—Ç –æ—Ç AI

        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥, False –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
        """
        # –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–ø–æ—á–µ–∫ follow_up: –∏–∑–±–µ–≥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏.
        next_input: Optional[str] = ai_response
        attempts = 0
        while next_input is not None and attempts <= self.max_retries:
            attempts += 1
            try:
                json_str = self.extract_first_json(next_input, allow_json_in_think=True)
                if not json_str or json_str == next_input:
                    logger.info("üí¨ –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ JSON")
                    if len(next_input.strip()) > 5 and not next_input.strip().startswith('{'):
                        logger.info("üí¨ –ò—Å–ø–æ–ª—å–∑—É—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π")
                        self.last_final_response = next_input.strip()
                        return False
                    think_content = self.extract_think_content(next_input)
                    if think_content:
                        json_in_think = self._extract_json_from_text(think_content)
                        if json_in_think:
                            logger.info("üîç –ù–∞–π–¥–µ–Ω JSON –≤–Ω—É—Ç—Ä–∏ <think> –±–ª–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é –µ–≥–æ")
                            json_str = json_in_think
                        else:
                            feedback = "–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ."
                            next_input = self.call_brain_model(feedback)
                            continue
                    else:
                        feedback = "–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ."
                        next_input = self.call_brain_model(feedback)
                        continue

                action_data, fixes = self._smart_json_parse(json_str)
                if fixes:
                    logger.warning(f"‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JSON: {'; '.join(fixes)}")
                if not action_data:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–∞–∂–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:\n{json_str}")
                    self.retry_count += 1
                    if self.retry_count > self.max_retries:
                        logger.warning(f"üîÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ({self.max_retries}), –∑–∞–≤–µ—Ä—à–∞—é –¥–∏–∞–ª–æ–≥")
                        self.retry_count = 0
                        self.last_final_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
                        return False
                    think_content = self.extract_think_content(next_input)
                    if think_content:
                        logger.info("üí≠ –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–ª–æ–∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π - –º–æ–¥–µ–ª—å —Ä–∞–∑–º—ã—à–ª—è–µ—Ç, –Ω–æ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ")
                        logger.info(f"üí≠ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {think_content[:200]}...")
                        if len(think_content) > 20 and any(word in think_content.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
                            logger.info("üí≠ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è—Ö, –∑–∞–≤–µ—Ä—à–∞—é –¥–∏–∞–ª–æ–≥")
                            self.retry_count = 0
                            self.last_final_response = "–ü—Ä–∏–≤–µ—Ç! –Ø –ù–µ–π—Ä–æ, –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
                            return False
                        if self.retry_count >= 2 and '–ø—Ä–∞–≤–∏–ª' in think_content.lower():
                            logger.info("üí≠ –ú–æ–¥–µ–ª—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞—Ö, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—é")
                            self.retry_count = 0
                            self.last_final_response = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
                            return False
                        next_input = self.call_brain_model("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∞–≤–∏–ª–∞.")
                        continue
                    else:
                        next_input = self.call_brain_model("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
                        continue

                if 'action' not in action_data:
                    logger.warning("‚ö†Ô∏è –í JSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'action', –¥–æ–±–∞–≤–ª—è—é action: 'unknown'")
                    action_data['action'] = 'unknown'

                if action_data == {} or (len(action_data) == 1 and 'action' in action_data and action_data['action'] == 'unknown'):
                    logger.info("üí≠ –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π JSON - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —Ä–∞–∑–º—ã—à–ª—è–µ—Ç")
                    think_content = self.extract_think_content(next_input)
                    if think_content and len(think_content) > 20:
                        logger.info("üí≠ –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∫–∞–∫ –æ—Ç–≤–µ—Ç")
                        self.last_final_response = think_content
                        return False
                    next_input = self.call_brain_model("–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π JSON. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.")
                    continue

                action = action_data.get("action")
                self.retry_count = 0

                # –í—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Å–ª–µ–¥—É—é—â–∏–π –≤–≤–æ–¥ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
                handler_result = None
                if action == "powershell":
                    handler_result = self._handle_powershell(action_data)
                elif action == "search":
                    handler_result = self._handle_search(action_data)
                elif action == "take_screenshot":
                    handler_result = self._handle_take_screenshot(action_data)
                elif action == "move_mouse":
                    handler_result = self._handle_move_mouse(action_data)
                elif action == "left_click":
                    handler_result = self._handle_left_click(action_data)
                elif action == "right_click":
                    handler_result = self._handle_right_click(action_data)
                elif action in ["scroll_up", "scroll_down"]:
                    handler_result = self._handle_scroll(action, action_data)
                elif action == "mouse_down":
                    handler_result = self._handle_mouse_down(action_data)
                elif action == "mouse_up":
                    handler_result = self._handle_mouse_up(action_data)
                elif action == "drag_and_drop":
                    handler_result = self._handle_drag_and_drop(action_data)
                elif action == "type_text":
                    handler_result = self._handle_type_text(action_data)
                elif action == "generate_image":
                    handler_result = self._handle_generate_image(action_data)
                elif action == "generate_video":
                    handler_result = self._handle_generate_video(action_data)
                elif action == "speak":
                    handler_result = self._handle_speak(action_data)
                elif action == "response":
                    handler_result = self._handle_response(action_data)
                else:
                    logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                    return False

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ö–µ–Ω–¥–ª–µ—Ä–∞: False => –∑–∞–≤–µ—Ä—à–∏—Ç—å, str => –Ω–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if handler_result is False:
                    return False
                elif isinstance(handler_result, str):
                    next_input = handler_result
                    continue
                else:
                    # –ï—Å–ª–∏ —Ö–µ–Ω–¥–ª–µ—Ä –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º
                    logger.error("‚ùå –•–µ–Ω–¥–ª–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∑–∞–≤–µ—Ä—à–∞—é")
                    return False

            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ AI: {e}")
                logger.info(f"üìù –û—Ç–≤–µ—Ç AI: {next_input}")
                return False
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI: {str(e)}")
                return False

        logger.warning("üîÑ –ü—Ä–µ–≤—ã—à–µ–Ω —Ü–∏–∫–ª –ø–æ–ø—ã—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ follow_up –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç. –ó–∞–≤–µ—Ä—à–∞—é.")
        return False

    def run_interactive(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–≥–ª–∞–∑–∞, –∞—É–¥–∏–æ, –º–æ–∑–≥)"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if getattr(self, 'show_images_locally', True):
            logger.info("üöÄ AI PowerShell –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω!")
            logger.info("üí° –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ Photos –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤ Audio –µ—Å—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª, —Å–Ω–∞—á–∞–ª–∞ –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –≥–ª–∞–∑–∞–º–∏/—É—à–∞–º–∏, –∑–∞—Ç–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –º–æ–∑–≥–∞.")
            logger.info(f"üß† –ú–æ–¥–µ–ª—å: {os.path.basename(self.brain_model)}")
            logger.info(f"üìä {self.get_context_info()}")
            logger.info("üíª –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: 'stats' (–º–µ—Ç—Ä–∏–∫–∏), 'reset' (—Å–±—Ä–æ—Å), 'logs' (–ª–æ–≥–∏), 'export' (—ç–∫—Å–ø–æ—Ä—Ç), 'memory' (–ø–∞–º—è—Ç—å), 'gpu' (–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞), 'search' (–ø–æ–∏—Å–∫), 'preferences' (–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è), 'cleanup' (–æ—á–∏—Å—Ç–∫–∞), 'exit' (–≤—ã—Ö–æ–¥)")
            logger.info("="*60)

        vision_desc = ""
        audio_text = ""
        while True:
            try:
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_path = self.find_new_image()
                image_base64 = ""
                if image_path:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
                    if getattr(self, 'show_images_locally', True):
                        logger.info(f"üì∏ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {os.path.basename(image_path)}")
                    image_base64 = image_to_base64_balanced(image_path)
                    if image_base64:
                        if getattr(self, 'show_images_locally', True):
                            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (—Ä–∞–∑–º–µ—Ä: {len(image_base64)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é base64-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
                        try:
                            # base64 –∏ io —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
                            img_bytes = base64.b64decode(image_base64)
                            with open(os.path.join(os.path.dirname(__file__), "last_sent_image.png"), "wb") as f:
                                f.write(img_bytes)
                            if getattr(self, 'show_images_locally', True):
                                logger.info("üñºÔ∏è –°–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ last_sent_image.png")
                        except Exception as e:
                            if getattr(self, 'show_images_locally', True):
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å last_sent_image.png: {e}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ vision-–º–æ–¥–µ–ª—å
                        vision_desc = self.call_vision_model(image_base64)
                        if getattr(self, 'show_images_locally', True):
                            logger.info("\nüëÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≥–ª–∞–∑–∞):\n" + vision_desc)
                        self.mark_image_used(image_path)
                    else:
                        if getattr(self, 'show_images_locally', True):
                            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                else:
                    vision_desc = ""

                audio_path = self.find_new_audio()
                if audio_path:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
                    if getattr(self, 'show_images_locally', True):
                        logger.info(f"üîä –ù–∞–π–¥–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª: {os.path.basename(audio_path)}")
                        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å —è–∑—ã–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        lang = input("ÔøΩÔøΩ –í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ru, en, etc..) –∏–ª–∏ Enter –¥–ª—è ru: ").strip() or "ru"
                    else:
                        # –í –≤–µ–±-—Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        lang = "ru"
                    audio_text = self.transcribe_audio_whisper(audio_path, lang=lang, use_separator=getattr(self, 'use_separator', True))
                    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω –≤–Ω—É—Ç—Ä–∏ transcribe_audio_whisper, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
                else:
                    audio_text = ""

                # 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                try:
                    if getattr(self, 'show_images_locally', True):
                        user_input = input("\nüë§ –í–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞, –ª–∏–±–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube): ").strip()
                    else:
                        # –í –≤–µ–±-—Ä–µ–∂–∏–º–µ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥
                        user_input = ""
                except EOFError:
                    # –ï—Å–ª–∏ –≤–≤–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞/pipe, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                    user_input = ""
                    if getattr(self, 'show_images_locally', True):
                        logger.info("üìù –í–≤–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞/pipe, –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
                if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                    if getattr(self, 'show_images_locally', True):
                        logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                if user_input.lower() in ['stats', '–º–µ—Ç—Ä–∏–∫–∏', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
                    if getattr(self, 'show_images_locally', True):
                        stats = self.get_performance_stats()
                        logger.info("\nüìä –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
                        logger.info(f"   –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}")
                        logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']} —Å–µ–∫")
                        if stats['recent_metrics']:
                            logger.info("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
                            for metric in stats['recent_metrics'][-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                                timestamp = time.strftime("%H:%M:%S", time.localtime(metric['timestamp']))
                                logger.info(f"     [{timestamp}] {metric['action']}: {metric['response_time']:.2f} —Å–µ–∫")
                        logger.info(f"   {self.get_context_info()}")
                    continue
                if user_input.lower() in ['reset', '—Å–±—Ä–æ—Å', '–æ—á–∏—Å—Ç–∏—Ç—å']:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é
                    self.performance_metrics.clear()
                    self.conversation_history.clear()
                    self.current_context_length = 0
                    if getattr(self, 'show_images_locally', True):
                        logger.info("üîÑ –ú–µ—Ç—Ä–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")
                    continue
                if user_input.lower() in ['logs', '–ª–æ–≥–∏']:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
                    if getattr(self, 'show_images_locally', True):
                        try:
                            with open("ai_orchestrator.log", "r", encoding="utf-8") as f:
                                lines = f.readlines()
                                logger.info("\nüìù –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–ò–°–ò –í –õ–û–ì–ï:")
                                for line in lines[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                                    logger.info(f"   {line.strip()}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")
                    continue
                if user_input.lower() in ['export', '—ç–∫—Å–ø–æ—Ä—Ç']:
                    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ JSON —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
                    if getattr(self, 'show_images_locally', True):
                        try:
                            stats = self.get_performance_stats()
                            export_data = {
                                "export_time": time.strftime("%Y-%m-%d %H:%M:%S"),
                                "performance_stats": stats,
                                "context_info": {
                                    "current": self.current_context_length,
                                    "safe": self.safe_context_length,
                                    "max": self.max_context_length
                                }
                            }
                            filename = f"metrics_export_{int(time.time())}.json"
                            with open(filename, "w", encoding="utf-8") as f:
                                json.dump(export_data, f, ensure_ascii=False, indent=2)
                            logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
                    continue
                if user_input.lower() in ['memory', '–ø–∞–º—è—Ç—å', 'mem']:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ ChromaDB
                    if getattr(self, 'show_images_locally', True):
                        try:
                            stats = self.get_memory_stats()
                            logger.info("\nüß† –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–ú–Ø–¢–ò CHROMADB:")
                            if "error" not in stats:
                                logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']}")
                                logger.info(f"   –î–∏–∞–ª–æ–≥–æ–≤: {stats['conversations']}")
                                logger.info(f"   –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {stats['preferences']}")
                                logger.info(f"   –ü—É—Ç—å –∫ –ë–î: {stats['database_path']}")
                                logger.info(f"   –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {stats['embedding_model']}")
                            else:
                                logger.error(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
                    continue
                if user_input.lower() in ['gpu', '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞', 'gpuinfo']:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU –¥–ª—è ChromaDB
                    if getattr(self, 'show_images_locally', True):
                        try:
                            gpu_info = self.get_gpu_info()
                            logger.info("\nüéÆ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û GPU –î–õ–Ø CHROMADB:")
                            if "error" not in gpu_info:
                                logger.info(f"   GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if gpu_info['gpu_available'] else '–ù–µ—Ç'}")
                                if gpu_info['gpu_available']:
                                    logger.info(f"   –ù–∞–∑–≤–∞–Ω–∏–µ GPU: {gpu_info['gpu_name']}")
                                    logger.info(f"   –ü–∞–º—è—Ç—å GPU: {gpu_info['gpu_memory']:.1f} GB")
                                logger.info(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {gpu_info['device_used']}")
                            else:
                                logger.error(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU: {gpu_info['error']}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU: {e}")
                    continue
                if user_input.lower() in ['cleanup', '–æ—á–∏—Å—Ç–∫–∞', 'clean']:
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ø–∞–º—è—Ç–∏
                    if getattr(self, 'show_images_locally', True):
                        try:
                            days = input("üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip()
                            days_to_keep = int(days) if days.isdigit() else 30
                            deleted_count = self.cleanup_old_memory(days_to_keep)
                            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ø–∞–º—è—Ç–∏")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
                    continue
                if user_input.lower() in ['search', '–ø–æ–∏—Å–∫', 'find']:
                    # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
                    if getattr(self, 'show_images_locally', True):
                        try:
                            query = input("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
                            if query:
                                results = self.search_similar_conversations(query, n_results=3)
                                if results:
                                    logger.info(f"\nüîç –ù–ê–ô–î–ï–ù–û {len(results)} –ü–û–•–û–ñ–ò–• –î–ò–ê–õ–û–ì–û–í:")
                                    for i, result in enumerate(results, 1):
                                        logger.info(f"   {i}. –°—Ö–æ–∂–µ—Å—Ç—å: {result['similarity']:.2f}")
                                        logger.info(f"      ID: {result['id']}")
                                        logger.info(f"      –¢–µ–∫—Å—Ç: {result['document'][:100]}...")
                                        logger.info(f"      –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(result['metadata']['timestamp']))}")
                                        logger.info("")
                                else:
                                    logger.info("üîç –ü–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                    continue
                if user_input.lower() in ['preferences', '–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', 'prefs']:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if getattr(self, 'show_images_locally', True):
                        try:
                            query = input("üë§ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–∏–ª–∏ Enter –¥–ª—è –≤—Å–µ—Ö): ").strip()
                            preferences = self.get_user_preferences(query if query else None)
                            if preferences:
                                logger.info(f"\nüë§ –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
                                logger.info(preferences)
                            else:
                                logger.info("üë§ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
                    continue
                if not user_input:
                    continue

                # 4. –ü–µ—Ä–µ—Ö–≤–∞—Ç: –µ—Å–ª–∏ –µ—Å—Ç—å YouTube-—Å—Å—ã–ª–∫–∞, —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ, –∑–∞—Ç–µ–º —Ñ–æ—Ä–º–∏—Ä—É–µ–º brain_input: –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —Å—Å—ã–ª–∫–∏, –≤–º–µ—Å—Ç–æ –Ω–µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏–∫–∞), –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º brain_input –≤ –º–æ–∑–≥
                # re —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
                yt_url_match = re.search(r'https?://(?:www\.)?(?:youtube\.com|youtu\.be)/\S+', user_input)
                yt_processed = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube
                if yt_url_match:
                    yt_url = yt_url_match.group(0)
                    logger.info("üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube, —Å–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º VPN —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
                    if not self.check_vpn_status():
                        logger.warning("‚ö†Ô∏è VPN –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. YouTube –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                        user_input_no_url = re.sub(r'https?://\S+', '[YouTube –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ VPN]', user_input).strip()
                        brain_input = f"{user_input_no_url}\n\n[–û–®–ò–ë–ö–ê]: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å YouTube –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ VPN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
                        ai_response = self.call_brain_model(brain_input)
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YouTube —Å—Å—ã–ª–∫–∏
                    if not self.check_youtube_accessibility(yt_url):
                        logger.error("‚ùå YouTube —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ VPN –∏–ª–∏ —Å—Å—ã–ª–∫—É.")
                        user_input_no_url = re.sub(r'https?://\S+', '[YouTube –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω]', user_input).strip()
                        brain_input = f"{user_input_no_url}\n\n[–û–®–ò–ë–ö–ê]: YouTube —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ VPN –∏–ª–∏ —Å—Å—ã–ª–∫—É."
                        ai_response = self.call_brain_model(brain_input)
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                    video_info = self.get_youtube_info(yt_url)
                    if video_info.get('success'):
                        video_title = video_info['title']
                        logger.info(f"üìπ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {video_title}")
                    else:
                        video_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ"
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: {video_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    yt_video = self.download_youtube_video(yt_url)
                    if yt_video:
                        logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {yt_video}")
                        # video_title —É–∂–µ –ø–æ–ª—É—á–µ–Ω –≤—ã—à–µ –∏–∑ get_youtube_info
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube")
                        video_title = "–í–∏–¥–µ–æ –Ω–µ —Å–∫–∞—á–∞–Ω–æ"
                    logger.info("üîó –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
                    yt_audio = self.download_youtube_audio(yt_url)
                    if yt_audio:
                        logger.info(f"‚úÖ –ê—É–¥–∏–æ —Å–∫–∞—á–∞–Ω–æ: {yt_audio}")
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–∏–¥–µ–æ, –∞ –Ω–µ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                        if "english" in video_title.lower() or "eng" in video_title.lower():
                            lang = "en"
                        elif "—Ä—É—Å" in video_title.lower() or "russian" in video_title.lower():
                            lang = "ru"
                        else:
                            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–∏–¥–µ–æ
                            # –î–ª—è Rick Astley –∏ –ø–æ–¥–æ–±–Ω—ã—Ö - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                            if any(word in video_title.lower() for word in ["rick", "astley", "never", "gonna", "give", "you", "up"]):
                                lang = "en"
                                logger.info("üåê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–∏–¥–µ–æ)")
                            else:
                                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π
                                lang = "ru"
                                logger.info("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ä—É—Å—Å–∫–∏–π")
                        audio_text = self.transcribe_audio_whisper(yt_audio, lang=lang, use_separator=getattr(self, 'use_separator', True))
                        # --- VISION –ü–û–ö–ê–î–†–û–í–û ---
                        vision_frames_desc = ""
                        if getattr(self, 'use_vision', False) and yt_video:
                            logger.info("üñºÔ∏è –ò–∑–≤–ª–µ–∫–∞—é –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ –¥–ª—è vision...")
                            frames = self.extract_video_frames(yt_video, fps=1)
                            frame_results = []  # [(timecode, desc)]
                            for idx, (timecode, b64) in enumerate(frames):
                                if not b64:
                                    continue
                                vision_prompt = "Describe absolutely everything you see in the image, including all small details, their positions, and any visible text. Be as detailed as possible."
                                desc = self.call_vision_model(b64 + "\n" + vision_prompt)
                                frame_results.append((timecode, desc))
                                logger.info(f"[VISION][{timecode}] {desc}")
                            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
                            # collections.defaultdict —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
                            grouped = []  # [(list_of_timecodes, desc)]
                            prev_desc = None
                            prev_times = []
                            for i, (tc, desc) in enumerate(frame_results):
                                if prev_desc is None:
                                    prev_desc = desc
                                    prev_times = [tc]
                                elif desc == prev_desc:
                                    prev_times.append(tc)
                                else:
                                    grouped.append((prev_times, prev_desc))
                                    prev_desc = desc
                                    prev_times = [tc]
                            if prev_times:
                                grouped.append((prev_times, prev_desc))
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏
                            def format_timecodes(times):
                                def tc_to_sec(tc):
                                    h, m, s = map(int, tc.strip('[]').split(':'))
                                    return h*3600 + m*60 + s
                                if len(times) == 1:
                                    return times[0]
                                secs = [tc_to_sec(t) for t in times]
                                sorted_pairs = sorted(zip(secs, times))
                                secs_sorted, times_sorted = zip(*sorted_pairs)
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–¥—Ä—è–¥
                                ranges = []
                                start = end = secs_sorted[0]
                                start_tc = times_sorted[0]
                                for i in range(1, len(secs_sorted)):
                                    if secs_sorted[i] == end + 1:
                                        end = secs_sorted[i]
                                    else:
                                        if start != end:
                                            ranges.append(f"[{start_tc}-{times_sorted[i-1]}]")
                                        else:
                                            ranges.append(f"{start_tc}")
                                        start = end = secs_sorted[i]
                                        start_tc = times_sorted[i]
                                if start != end:
                                    ranges.append(f"[{start_tc}-{times_sorted[-1]}]")
                                else:
                                    ranges.append(f"{start_tc}")
                                return ', '.join(ranges)
                            for times, desc in grouped:
                                vision_frames_desc += f"{format_timecodes(times)}: {desc}\n"
                        # –§–æ—Ä–º–∏—Ä—É–µ–º brain_input: –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —Å—Å—ã–ª–∫–∏, –≤–º–µ—Å—Ç–æ –Ω–µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏–∫–∞), –æ—Ç–≤–µ—Ç—ã vision –ø–æ –∫–∞–¥—Ä–∞–º, –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ (—Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏)
                        user_input_no_url = re.sub(r'https?://\S+', f'[–í–∏–¥–µ–æ]: {video_title}' if video_title else '', user_input).strip()
                        brain_input = ""
                        brain_input += user_input_no_url
                        if vision_frames_desc:
                            brain_input += f"\n[–ü–æ–∫–∞–¥—Ä–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ]:\n{vision_frames_desc}"
                        if audio_text:
                            brain_input += f"\n[–¢–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ]:\n{audio_text}"
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–∑–≥ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                        ai_response = self.call_brain_model(brain_input)
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                        logger.info(f"üìä {self.get_context_info()}")
                        continue_dialog = self.process_ai_response(ai_response)
                        if not continue_dialog:
                            logger.info("\n" + "="*60)
                        yt_processed = True  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ YouTube –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                        continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π brain_input –Ω–∏–∂–µ
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ —Å YouTube")

                # 5. –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–∑–≥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ YouTube –æ–±—Ä–∞–±–æ—Ç–∫–∏)
                if not yt_processed:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ –≤–º–µ—Å—Ç–æ yt_url_match
                    brain_input = ""
                    if vision_desc:
                        brain_input += f"[–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]:\n{vision_desc}\n"
                    if audio_text:
                        brain_input += f"[–¢–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ]:\n{audio_text}\n"
                    brain_input += user_input

                    # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –º–æ–∑–≥
                    ai_response = self.call_brain_model(brain_input)
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    logger.info(f"üìä {self.get_context_info()}")
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç AI
                    continue_dialog = self.process_ai_response(ai_response)
                    if not continue_dialog:
                        logger.info("\n" + "="*60)

            except Exception as e:
                if isinstance(e, KeyboardInterrupt):
                    logger.info("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ - —ç—Ç–æ —É–∂–µ –¥–µ–ª–∞–µ—Ç—Å—è –≤—ã—à–µ
                audio_text = ""

                # 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                try:
                    user_input = input("\nüë§ –í–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞, –ª–∏–±–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube): ").strip()
                except EOFError:
                    # –ï—Å–ª–∏ –≤–≤–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞/pipe, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                    user_input = ""
                    logger.info("üìù –í–≤–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞/pipe, –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
                if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                    logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                if user_input.lower() in ['stats', '–º–µ—Ç—Ä–∏–∫–∏', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    stats = self.get_performance_stats()
                    logger.info("\nüìä –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
                    logger.info(f"   –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}")
                    logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']} —Å–µ–∫")
                    if stats['recent_metrics']:
                        logger.info("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
                        for metric in stats['recent_metrics'][-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                            timestamp = time.strftime("%H:%M:%S", time.localtime(metric['timestamp']))
                            logger.info(f"     [{timestamp}] {metric['action']}: {metric['response_time']:.2f} —Å–µ–∫")
                    logger.info(f"   {self.get_context_info()}")
                    continue
                if user_input.lower() in ['reset', '—Å–±—Ä–æ—Å', '–æ—á–∏—Å—Ç–∏—Ç—å']:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é
                    self.performance_metrics.clear()
                    self.conversation_history.clear()
                    self.current_context_length = 0
                    logger.info("üîÑ –ú–µ—Ç—Ä–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")
                    continue
                if user_input.lower() in ['logs', '–ª–æ–≥–∏']:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞
                    try:
                        with open("ai_orchestrator.log", "r", encoding="utf-8") as f:
                            lines = f.readlines()
                            logger.info("\nüìù –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–ò–°–ò –í –õ–û–ì–ï:")
                            for line in lines[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                                logger.info(f"   {line.strip()}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")
                    continue
                if user_input.lower() in ['export', '—ç–∫—Å–ø–æ—Ä—Ç']:
                    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ JSON —Ñ–∞–π–ª
                    try:
                        stats = self.get_performance_stats()
                        export_data = {
                            "export_time": time.strftime("%Y-%m-%d %H:%M:%S"),
                            "performance_stats": stats,
                            "context_info": {
                                "current": self.current_context_length,
                                "safe": self.safe_context_length,
                                "max": self.max_context_length
                            }
                        }
                        filename = f"metrics_export_{int(time.time())}.json"
                        with open(filename, "w", encoding="utf-8") as f:
                            json.dump(export_data, f, ensure_ascii=False, indent=2)
                        logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
                    continue
                if not user_input:
                    continue



            except KeyboardInterrupt:
                logger.info("\nÔøΩÔøΩ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break



    def start_telegram_bot(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ, –∏–Ω–∞—á–µ False."""
        if not self.telegram_bot_token:
            logger.warning("‚ùå Telegram Bot —Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω")
            return False
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ getMe –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ª–æ–≥–∞—Ö
        try:
            redacted = self.telegram_bot_token[:10] + "..." if len(self.telegram_bot_token) > 13 else "***"
            logger.info(f"üîê –ü—Ä–æ–≤–µ—Ä—è—é Telegram —Ç–æ–∫–µ–Ω (redacted: {redacted})")
            resp = requests.get(f"https://api.telegram.org/bot{self.telegram_bot_token}/getMe", timeout=5)
            if resp.status_code != 200:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —Ç–æ–∫–µ–Ω–∞: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
                return False
            data = resp.json()
            if not data.get("ok"):
                # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π —Ç–æ–∫–µ–Ω
                logger.error(f"‚ùå Telegram —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º (token: {redacted})")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.telegram_app = Application.builder().token(self.telegram_bot_token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.telegram_app.add_handler(CommandHandler("start", self._telegram_start))
            self.telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._telegram_text_message))
            self.telegram_app.add_handler(MessageHandler(filters.PHOTO, self._telegram_photo_message))
            self.telegram_app.add_handler(MessageHandler(filters.AUDIO | filters.VOICE, self._telegram_audio_message))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            def run_bot():
                loop = None
                try:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    from typing import Any, cast
                    coro = self.telegram_app.run_polling(allowed_updates=Update.ALL_TYPES)
                    if coro is not None:
                        loop.run_until_complete(cast(Any, coro))
                except Exception as e:
                    # –í –≤–µ–±-—Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏—Ö–æ
                    if not getattr(self, 'show_images_locally', True):
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {e}")
                    else:
                        logger.debug(f"Telegram bot polling error: {e}")
                finally:
                    if loop is not None:
                        try:
                            loop.close()
                        except Exception:
                            pass
            
            bot_thread = threading.Thread(target=run_bot, daemon=True)
            bot_thread.start()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            if not getattr(self, 'show_images_locally', True):
                logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            return True
            
        except Exception as e:
            # –í –≤–µ–±-—Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏—Ö–æ
            if not getattr(self, 'show_images_locally', True):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            else:
                logger.debug(f"Telegram bot startup error: {e}")
            return False

    async def _telegram_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if update is None or update.message is None or update.effective_user is None:
            return
        user_id = str(update.effective_user.id)
        if user_id != self.telegram_allowed_user_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ù–µ–π—Ä–æ - AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.\n"
            "–Ø –º–æ–≥—É:\n"
            "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –í—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã PowerShell\n"
            "‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ!"
        )

    async def _telegram_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update is None or update.message is None or update.effective_user is None or update.effective_chat is None:
            return
        user_id = str(update.effective_user.id)
        if user_id != self.telegram_allowed_user_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        text = update.message.text if update.message and update.message.text else ""
        await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–∑–≥
            ai_response = self.call_brain_model(text or "")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç AI
            continue_dialog = self.process_ai_response(ai_response)

            if not continue_dialog:
                # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                if hasattr(self, 'last_final_response') and self.last_final_response:
                    await update.message.reply_text(self.last_final_response)

                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                    if hasattr(self, 'last_generated_image_b64') and self.last_generated_image_b64:
                        try:
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ bytes
                            img_bytes = base64.b64decode(self.last_generated_image_b64)

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            await context.bot.send_photo(
                                chat_id=update.effective_chat.id,
                                photo=img_bytes,
                                caption="üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                            )

                            # –û—á–∏—â–∞–µ–º
                            self.last_generated_image_b64 = None

                        except Exception as e:
                            # –í –≤–µ–±-—Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏—Ö–æ
                            if not getattr(self, 'show_images_locally', True):
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                            else:
                                logger.debug(f"Telegram image send error: {e}")
                            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                else:
                    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
            else:
                # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

        except Exception as e:
            # –í–µ–±-—Ä–µ–∂–∏–º: –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏—Ö–æ
            if getattr(self, 'show_images_locally', True):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                logger.debug(f"Telegram text message error: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    async def _telegram_photo_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        if update is None or update.message is None or update.effective_user is None or update.effective_chat is None:
            return
        user_id = str(update.effective_user.id)
        if user_id != self.telegram_allowed_user_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        await update.message.reply_text("üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            file = await context.bot.get_file(photo.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_bytes = await file.download_as_bytearray()
            photo_b64 = base64.b64encode(photo_bytes).decode('ascii')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            vision_desc = self.call_vision_model(photo_b64)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            await update.message.reply_text(f"üëÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n{vision_desc}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
            self.last_telegram_image = photo_b64
            
        except Exception as e:
            # –í –≤–µ–±-—Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏—Ö–æ
            if getattr(self, 'show_images_locally', True):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            else:
                logger.debug(f"Telegram photo processing error: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    async def _telegram_audio_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update is None or update.message is None or update.effective_user is None or update.effective_chat is None:
            return
        user_id = str(update.effective_user.id)
        if user_id != self.telegram_allowed_user_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç–∞.")
            return
        
        await update.message.reply_text("üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ
            if update.message.audio:
                audio = update.message.audio
            else:
                audio = update.message.voice

            if audio is None:
                await update.message.reply_text("‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞")
                return
            
            file = await context.bot.get_file(audio.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            audio_bytes = await file.download_as_bytearray()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_dir = os.path.join(os.path.dirname(__file__), "temp_audio")
            os.makedirs(temp_dir, exist_ok=True)
            temp_file = os.path.join(temp_dir, f"telegram_audio_{int(time.time())}.ogg")
            
            with open(temp_file, 'wb') as f:
                f.write(audio_bytes)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            transcript = self.transcribe_audio_whisper(temp_file, use_separator=False)
            
            if transcript and not transcript.startswith("[Whisper error]"):
                await update.message.reply_text(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ:\n{transcript}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
                self.last_telegram_audio_transcript = transcript
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(temp_file)
            except Exception:
                pass
                
        except Exception as e:
            # –í –≤–µ–±-—Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏—Ö–æ
            if getattr(self, 'show_images_locally', True):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
            else:
                logger.debug(f"Telegram audio processing error: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {str(e)}")

    def play_audio_file(self, audio_path: str) -> bool:
        """
        –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ–¥–∏–Ω —Ä–∞–∑ –±–µ–∑ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
        
        Args:
            audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            import pygame  # type: ignore
            import time
            
            logger.info(f"üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ: {os.path.basename(audio_path)}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º pygame mixer
            pygame.mixer.init()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
            try:
                pygame.mixer.music.load(audio_path)
                pygame.mixer.music.play()
                
                # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                while pygame.mixer.music.get_busy():
                    time.sleep(0.1)
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
                pygame.mixer.music.stop()
                pygame.mixer.quit()
                
                logger.info("‚úÖ –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ —á–µ—Ä–µ–∑ pygame")
                return True
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è pygame –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
                pygame.mixer.quit()
                
                # Fallback: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –ø–ª–µ–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                import subprocess
                subprocess.Popen(["start", audio_path], shell=True)
                logger.info("üîÑ –û—Ç–∫—Ä—ã—Ç –≤ –ø–ª–µ–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return True
                
        except ImportError:
            logger.warning("‚ö†Ô∏è pygame –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            # Fallback: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –ø–ª–µ–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            import subprocess
            subprocess.Popen(["start", audio_path], shell=True)
            logger.info("üîÑ –û—Ç–∫—Ä—ã—Ç –≤ –ø–ª–µ–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return False

    def text_to_speech(self, text: str, voice: str = "male", language: str = "ru", auto_play: bool = True) -> str:
        """
        –û–∑–≤—É—á–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é gTTS (Google Text-to-Speech)
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
            voice: –¢–∏–ø –≥–æ–ª–æ—Å–∞ ("male" –∏–ª–∏ "female") - –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ gTTS
            language: –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ ("ru", "en", etc.)
            auto_play: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            from gtts import gTTS
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ—á–∏
            output_dir = os.path.join(os.path.dirname(__file__), "Audio", "generated_speech")
            os.makedirs(output_dir, exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = int(time.time())
            filename = f"tts_{voice}_{language}_{timestamp}.mp3"
            output_path = os.path.join(output_dir, filename)
            
            logger.info(f"üé§ –û–∑–≤—É—á–∏–≤–∞—é —Ç–µ–∫—Å—Ç: {text[:100]}...")
            logger.info(f"üîä –ì–æ–ª–æ—Å: {voice}, –Ø–∑—ã–∫: {language}")
            logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É—é Google TTS API")
            
            # –°–æ–∑–¥–∞–µ–º TTS –æ–±—ä–µ–∫—Ç
            tts = gTTS(text=text, lang=language, slow=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            tts.save(output_path)
            
            logger.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if auto_play:
                self.play_audio_file(output_path)
            
            return output_path
            
        except ImportError:
            logger.error("‚ùå gTTS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install gTTS")
            return ""
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            logger.error(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"üìã Traceback: {traceback.format_exc()}")
            return ""

    def enhance_prompt_with_memory(self, user_message: str, system_prompt: str = "") -> str:
        """
        –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∞–º—è—Ç–∏
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = self.get_relevant_context(user_message, max_context_length=1500)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            preferences = self.get_user_preferences(user_message)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            enhanced_prompt = system_prompt
            added_content = ""
            
            if context:
                context_section = f"\n\n–†–ï–õ–ï–í–ê–ù–¢–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ü–†–ï–î–´–î–£–©–ò–• –î–ò–ê–õ–û–ì–û–í:\n{context}\n\n–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ù–µ —É–ø–æ–º–∏–Ω–∞–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —è–≤–Ω–æ."
                enhanced_prompt += context_section
                added_content += context_section
            
            if preferences:
                preferences_section = f"\n\n–ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n{preferences}\n\n–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç—Ç–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞, –Ω–æ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π—Ç–µ –∏—Ö —è–≤–Ω–æ."
                enhanced_prompt += preferences_section
                added_content += preferences_section
            
            enhanced_prompt += f"\n\n–¢–ï–ö–£–©–ò–ô –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_message}"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            added_length = len(added_content)
            if added_length > 0:
                logger.info(f"üìö –ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω —Å –ø–æ–º–æ—â—å—é –ø–∞–º—è—Ç–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–æ: {added_length} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                logger.info(f"üìö –ü—Ä–æ–º–ø—Ç –Ω–µ —É–ª—É—á—à–µ–Ω (–ø–∞–º—è—Ç—å –ø—É—Å—Ç–∞)")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–∞–º–∏
            total_prompt_length = len(enhanced_prompt)
            logger.info(f"üìù –û–±—â–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {total_prompt_length} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return enhanced_prompt
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return f"{system_prompt}\n\n–¢–ï–ö–£–©–ò–ô –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_message}"
    
    def auto_save_conversation(self, user_message: str, ai_response: str, 
                              context: str = "", metadata: Optional[Dict[str, Any]] = None):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ –ø–∞–º—è—Ç—å
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ai_response: –û—Ç–≤–µ—Ç –ò–ò
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        """
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if metadata is None:
                metadata = {}
            
            metadata.update({
                "auto_saved": True,
                "response_length": len(ai_response),
                "user_message_length": len(user_message)
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            success = self.add_to_memory(user_message, ai_response, context, metadata)
            
            if success:
                logger.info("üíæ –î–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç—å")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –ø–∞–º—è—Ç—å")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def extract_preferences_from_response(self, user_message: str, ai_response: str):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ai_response: –û—Ç–≤–µ—Ç –ò–ò
        """
        try:
            # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            preference_patterns = [
                r"–º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è (.+?)(?:\.|$)",
                r"—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é (.+?)(?:\.|$)",
                r"–ª—É—á—à–µ –≤—Å–µ–≥–æ (.+?)(?:\.|$)",
                r"—Ö–æ—á—É (.+?)(?:\.|$)",
                r"–Ω—É–∂–Ω–æ (.+?)(?:\.|$)",
                r"–≤–∞–∂–Ω–æ (.+?)(?:\.|$)"
            ]
            
            # –ò—â–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for pattern in preference_patterns:
                matches = re.findall(pattern, user_message.lower())
                for match in matches:
                    if len(match) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                        self.add_user_preference(
                            match.strip(),
                            category="user_preference",
                            metadata={"source": "extracted", "pattern": pattern}
                        )
            
            # –¢–∞–∫–∂–µ –∏—â–µ–º –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò, –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_patterns = [
                r"–ø–æ–Ω—è–ª(?:–∞)?, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è (.+?)(?:\.|$)",
                r"–∑–∞–ø–æ–º–Ω—é, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ (.+?)(?:\.|$)",
                r"—É—á—Ç—É –≤–∞—à–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ (.+?)(?:\.|$)"
            ]
            
            for pattern in confirmation_patterns:
                matches = re.findall(pattern, ai_response.lower())
                for match in matches:
                    if len(match) > 10:
                        self.add_user_preference(
                            match.strip(),
                            category="confirmed_preference",
                            metadata={"source": "ai_confirmation", "pattern": pattern}
                        )
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")

    ### –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° CHROMADB ###
    
    def add_to_memory(self, user_message: str, ai_response: str, context: str = "", 
                     metadata: Optional[Dict[str, Any]] = None) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–∞–º—è—Ç–∏
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ai_response: –û—Ç–≤–µ—Ç –ò–ò
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        """
        try:
            return self.chromadb_manager.add_conversation_memory(
                user_message, ai_response, context, metadata
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å: {e}")
            return False
    
    def add_user_preference(self, preference_text: str, category: str = "general", 
                           metadata: Optional[Dict[str, Any]] = None) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        
        Args:
            preference_text: –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        """
        try:
            return self.chromadb_manager.add_user_preference(
                preference_text, category, metadata
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {e}")
            return False
    
    def get_relevant_context(self, query: str, max_context_length: int = 2000) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        
        Args:
            query: –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_context_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        try:
            return self.chromadb_manager.get_conversation_context(query, max_context_length)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return ""
    
    def get_user_preferences(self, query: Optional[str] = None) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            query: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            return self.chromadb_manager.get_user_preferences_summary(query)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
            return ""
    
    def search_similar_conversations(self, query: str, n_results: int = 5, 
                                   similarity_threshold: float = 0.7) -> List[Dict[str, Any]]:
        """
        –ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            n_results: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            similarity_threshold: –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ (0-1)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        """
        try:
            return self.chromadb_manager.search_similar_conversations(
                query, n_results, similarity_threshold
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return []
    
    def cleanup_old_memory(self, days_to_keep: int = 30) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ø–∞–º—è—Ç–∏
        
        Args:
            days_to_keep: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        try:
            return self.chromadb_manager.cleanup_old_records(days_to_keep)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return 0
    
    def get_memory_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            return self.chromadb_manager.get_database_stats()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return {"error": str(e)}
    
    def get_gpu_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU –¥–ª—è ChromaDB
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ GPU
        """
        try:
            if hasattr(self, 'chromadb_manager') and self.chromadb_manager:
                return self.chromadb_manager.get_gpu_info()
            else:
                return {"error": "ChromaDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU: {e}")
            return {"error": str(e)}

def ensure_wav(audio_path: str) -> Optional[str]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ WAV —Ñ–æ—Ä–º–∞—Ç –µ—Å–ª–∏ –æ–Ω –Ω–µ WAV"""
    try:
        if audio_path.lower().endswith('.wav'):
            return audio_path
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = os.path.join(os.path.dirname(__file__), "Audio", "temp_convert")
        os.makedirs(temp_dir, exist_ok=True)
        wav_path = os.path.join(temp_dir, f"converted_{int(time.time())}.wav")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ffmpeg
        cmd = [
            'ffmpeg', '-i', audio_path, '-acodec', 'pcm_s16le', 
            '-ar', '16000', '-ac', '1', wav_path, '-y'
        ]
        subprocess.run(cmd, check=True, capture_output=True)
        
        return wav_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WAV: {e}")
        return audio_path

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='AI PowerShell –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä')
    parser.add_argument('--web', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å')
    args = parser.parse_args()
    
    start_web = args.web
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –ø—Ä–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    if not start_web:
        logging.getLogger('httpx').setLevel(logging.WARNING)
        logging.getLogger('telegram').setLevel(logging.WARNING)
        logging.getLogger('telegram.ext').setLevel(logging.WARNING)
    
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI PowerShell –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    logger.info("="*50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª)
    LM_STUDIO_URL = "http://localhost:1234"  # URL –≤–∞—à–µ–≥–æ LM Studio —Å–µ—Ä–≤–µ—Ä–∞
    GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY", "").strip()  # –í–∞—à Google API –∫–ª—é—á
    GOOGLE_CSE_ID = os.getenv("GOOGLE_CSE_ID", "").strip()   # –í–∞—à Google CSE ID
    
    # Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()  # –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    TELEGRAM_ALLOWED_USER_ID = os.getenv("TELEGRAM_ALLOWED_USER_ID", "").strip()  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞

    # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ ---
    # –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    # –û–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    use_image_generation = False  # –í–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    use_vision = False           # –í–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    use_audio = False            # –í–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ
    use_separator = True         # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Whisper (–∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏)

    # –ú–æ–∑–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–∞–º–∏ –º–æ–¥–µ–ª—å
    brain_model = "J:/models-LM Studio/mradermacher/Huihui-Qwen3-4B-Thinking-2507-abliterated-GGUF/Huihui-Qwen3-4B-Thinking-2507-abliterated.Q4_K_S.gguf"
    logger.info(f"üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –º–æ–∑–≥–∞: {os.path.basename(brain_model)}")
    logger.info("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤")

    # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
    vision_model = "moondream2-llamafile"  # –ò–º—è vision-–º–æ–¥–µ–ª–∏ –≤—Å–µ–≥–¥–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
    whisper_model = "ggerganov/whisper-large-v3-GGUF"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏
    orchestrator = AIOrchestrator(
        lm_studio_url=LM_STUDIO_URL,
        google_api_key=GOOGLE_API_KEY,
        google_cse_id=GOOGLE_CSE_ID
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–Ω—ã –ª–∏ Google API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not GOOGLE_API_KEY or not GOOGLE_CSE_ID:
        logger.warning("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Google API –∫–ª—é—á –∏–ª–∏ CSE ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        logger.info("   –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        logger.info("   –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–µ main()")
        logger.info("")

    # –ü–µ—Ä–µ–¥–∞–µ–º brain_model –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator.brain_model = brain_model
    orchestrator.use_separator = use_separator
    orchestrator.use_image_generation = use_image_generation
    orchestrator.use_vision = use_vision
    orchestrator.use_audio = use_audio
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    orchestrator.telegram_bot_token = TELEGRAM_BOT_TOKEN
    orchestrator.telegram_allowed_user_id = TELEGRAM_ALLOWED_USER_ID
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ --web
    if start_web:
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–Ω–∞—Ö –ø—Ä–∏ –≤–µ–±-—Ä–µ–∂–∏–º–µ
            orchestrator.show_images_locally = False
        except Exception:
            pass
        # –ó–∞–ø—É—Å–∫–∞–µ–º uvicorn —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
        try:
            # subprocess, sys, os —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
            repo_root = os.path.dirname(os.path.abspath(__file__))
            cmd = [
                _sys.executable, "-m", "uvicorn", "webui.server:app",
                "--host", "127.0.0.1", "--port", "8001", "--app-dir", repo_root
            ]
            logger.info(f"üåê –°—Ç–∞—Ä—Ç—É—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä: {' '.join(cmd)}")
            subprocess.Popen(cmd, cwd=repo_root)
            logger.info("–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://127.0.0.1:8001/")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω
    if TELEGRAM_BOT_TOKEN:
        try:
            if start_web:
                logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Telegram –±–æ—Ç–∞...")
            tg_started = orchestrator.start_telegram_bot()
            if start_web:
                if tg_started:
                    logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
                else:
                    logger.info("‚ÑπÔ∏è Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω)")
        except Exception as e:
            if start_web:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            else:
                # –í –≤–µ–±-—Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏—Ö–æ
                logger.debug(f"Telegram bot error: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    orchestrator.run_interactive()


if __name__ == "__main__":
    main()
